typedef double Standard_Real;
typedef boolean Standard_Boolean;
typedef long Standard_Integer;
typedef DOMString Standard_CString;
//typedef VoidPtr Standard_OStream;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakeShape {
	void Build();
	[Const, Ref] TopoDS_Shape Shape(); 
	Standard_Boolean IsDeleted([Const, Ref] TopoDS_Shape S);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeBox {
	void BRepPrimAPI_MakeBox(
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz
	);
	// void BRepPrimAPI_MakeBox(
	// 	[Const, Ref] gp_Pnt P,
	// 	[Const] Standard_Real dx,
	// 	[Const] Standard_Real dy,
	// 	[Const] Standard_Real dz
	// );
	void BRepPrimAPI_MakeBox(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2
	);
	void BRepPrimAPI_MakeBox(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz
	);
	// BRepPrim_Wedge Wedge();
	void Build();
	[Const, Ref] TopoDS_Shell Shell();
	[Const, Ref] TopoDS_Solid Solid();
	[Const, Ref] TopoDS_Face BottomFace();
	[Const, Ref] TopoDS_Face BackFace();
	[Const, Ref] TopoDS_Face FrontFace();
	[Const, Ref] TopoDS_Face LeftFace();
	[Const, Ref] TopoDS_Face RightFace();
	[Const, Ref] TopoDS_Face TopFace();
};
BRepPrimAPI_MakeBox implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeCone {
	void BRepPrimAPI_MakeCone(
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real H
	);
	void BRepPrimAPI_MakeCone(
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real H,
		[Const] Standard_Real angle
	);
	// void BRepPrimAPI_MakeCone(
	// 	[Const, Ref] gp_Ax2 Axes,
	// 	[Const] Standard_Real R1,
	// 	[Const] Standard_Real R2,
	// 	[Const] Standard_Real H
	// );
	void BRepPrimAPI_MakeCone(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real H,
		[Const] Standard_Real angle
	);
	// [Value] Standard_Address OneAxis();
	// [Ref] BRepPrim_Cone Cone();
};
BRepPrimAPI_MakeCone implements BRepPrimAPI_MakeOneAxis;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeCylinder {
	void BRepPrimAPI_MakeCylinder(
		[Const] Standard_Real R,
		[Const] Standard_Real H
	);
	// void BRepPrimAPI_MakeCylinder(
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real H,
	// 	[Const] Standard_Real angle
	// );
	void BRepPrimAPI_MakeCylinder(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R,
		[Const] Standard_Real H
	);
	void BRepPrimAPI_MakeCylinder(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R,
		[Const] Standard_Real H,
		[Const] Standard_Real Angle
	);
	// [Value] Standard_Address OneAxis();
	// [Ref] BRepPrim_Cylinder Cylinder();
};
BRepPrimAPI_MakeCylinder implements BRepPrimAPI_MakeOneAxis;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeHalfSpace {
	// void BRepPrimAPI_MakeHalfSpace(
	// 	[Const, Ref] TopoDS_Face Face,
	// 	[Const, Ref] gp_Pnt RefPnt
	// );
	void BRepPrimAPI_MakeHalfSpace(
		[Const, Ref] TopoDS_Shell Shell,
		[Const, Ref] gp_Pnt RefPnt
	);
	[Const, Ref] TopoDS_Solid Solid();
};
BRepPrimAPI_MakeHalfSpace implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeOneAxis {
	// void Standard_Address OneAxis();
	void Build();
	[Const, Ref] TopoDS_Face Face();
	[Const, Ref] TopoDS_Shell Shell();
	[Const, Ref] TopoDS_Solid Solid();
};
BRepPrimAPI_MakeOneAxis implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeSweep {
	[Value] TopoDS_Shape FirstShape();
	[Value] TopoDS_Shape LastShape();
};
BRepPrimAPI_MakeSweep implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakePrism {
	void BRepPrimAPI_MakePrism(
		[Const, Ref] TopoDS_Shape S,
		[Const, Ref] gp_Vec V,
		[Const] optional Standard_Boolean Copy = false,
		[Const] optional Standard_Boolean Canonize = true
	);
	//void BRepPrimAPI_MakePrism(
	//	[Const, Ref] TopoDS_Shape S,
	//	[Const, Ref] gp_Dir D,
	//	[Const] optional Standard_Boolean Inf = true,
	//	[Const] optional Standard_Boolean Copy = false,
	//	[Const] optional Standard_Boolean Canonize = true
	//);
	// [Const, Ref] BRepSweep_Prism Prism();
	void Build();
	[Const, Ref] TopTools_ListOfShape Generated([Const, Ref] TopoDS_Shape S);
	Standard_Boolean IsDeleted([Const, Ref] TopoDS_Shape S);
	[Value] TopoDS_Shape FirstShape([Const, Ref] TopoDS_Shape theShape);
	[Value] TopoDS_Shape LastShape([Const, Ref] TopoDS_Shape theShape);
};
BRepPrimAPI_MakePrism implements BRepPrimAPI_MakeSweep;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeRevol {
	void BRepPrimAPI_MakeRevol(
		[Const, Ref] TopoDS_Shape S,
		[Const, Ref] gp_Ax1 A,
		[Const] Standard_Real D,
		[Const] Standard_Boolean Copy
	);
	void BRepPrimAPI_MakeRevol(
		[Const, Ref] TopoDS_Shape S,
		[Const, Ref] gp_Ax1 A,
		[Const] Standard_Boolean Copy
	);
	// [Const, Ref] BRepSweep_Revol Revol();
	void Build();
	[Const, Ref] TopTools_ListOfShape Generated([Const, Ref] TopoDS_Shape S);
	Standard_Boolean IsDeleted([Const, Ref] TopoDS_Shape S);
	[Value] TopoDS_Shape FirstShape([Const, Ref] TopoDS_Shape theShape);
	[Value] TopoDS_Shape LastShape([Const, Ref] TopoDS_Shape theShape);
	Standard_Boolean HasDegenerated();
	[Const, Ref] TopTools_ListOfShape Degenerated();
};
BRepPrimAPI_MakeRevol implements BRepPrimAPI_MakeSweep;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeRevolution {
	void BRepPrimAPI_MakeRevolution([Const, Ref] Handle_Geom_Curve Meridian);
	void BRepPrimAPI_MakeRevolution(
		[Const, Ref] Handle_Geom_Curve Meridian,
		[Const] Standard_Real angle
	);
	// void BRepPrimAPI_MakeRevolution(
	// 	[Const, Ref] Handle_Geom_Curve Meridian,
	// 	[Const] Standard_Real VMin,
	// 	[Const] Standard_Real VMax
	// );
	// void BRepPrimAPI_MakeRevolution(
	// 	[Const, Ref] Handle_Geom_Curve Meridian,
	// 	[Const] Standard_Real VMin,
	// 	[Const] Standard_Real VMax,
	// 	[Const] Standard_Real angle
	// );
	void BRepPrimAPI_MakeRevolution(
		[Const, Ref] gp_Ax2 Axes,
		[Const, Ref] Handle_Geom_Curve Meridian,
		[Const] Standard_Real angle
	);
	void BRepPrimAPI_MakeRevolution(
		[Const, Ref] gp_Ax2 Axes,
		[Const, Ref] Handle_Geom_Curve Meridian,
		[Const] Standard_Real VMin,
		[Const] Standard_Real VMax
	);
	void BRepPrimAPI_MakeRevolution(
		[Const, Ref] gp_Ax2 Axes,
		[Const, Ref] Handle_Geom_Curve Meridian,
		[Const] Standard_Real VMin,
		[Const] Standard_Real VMax,
		[Const] Standard_Real angle
	);
	// [Value] Standard_Address OneAxis();
	// [Ref] BRepPrim_Revolution Revolution();
};
BRepPrimAPI_MakeRevolution implements BRepPrimAPI_MakeOneAxis;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeSphere {
	void BRepPrimAPI_MakeSphere([Const]Standard_Real R);
	// void BRepPrimAPI_MakeSphere(
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2,
	// 	[Const] Standard_Real angle3
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const, Ref] gp_Pnt Center,
	// 	[Const] Standard_Real R
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const, Ref] gp_Pnt Center,
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const, Ref] gp_Pnt Center,
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2
	// );
	// void BRepPrimAPI_MakeSphere(
	// 	[Const, Ref] gp_Pnt Center,
	// 	[Const] Standard_Real R,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2,
	// 	[Const] Standard_Real angle3
	// );
	void BRepPrimAPI_MakeSphere(
		[Const, Ref] gp_Ax2 Axis,
		[Const] Standard_Real R
	);
	void BRepPrimAPI_MakeSphere(
		[Const, Ref] gp_Ax2 Axis,
		[Const] Standard_Real R,
		[Const] Standard_Real angle
	);
	void BRepPrimAPI_MakeSphere(
		[Const, Ref] gp_Ax2 Axis,
		[Const] Standard_Real R,
		[Const] Standard_Real angle1,
		[Const] Standard_Real angle2
	);
	void BRepPrimAPI_MakeSphere(
		[Const, Ref] gp_Ax2 Axis,
		[Const] Standard_Real R,
		[Const] Standard_Real angle1,
		[Const] Standard_Real angle2,
		[Const] Standard_Real angle3
	);
	// [Value] Standard_Address OneAxis();
	[Ref] BRepPrim_Sphere Sphere();
};
BRepPrimAPI_MakeSphere implements BRepPrimAPI_MakeOneAxis;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeTorus {
	// void BRepPrimAPI_MakeTorus(
	// 	[Const] Standard_Real R1,
	// 	[Const] Standard_Real R2
	// );
	// void BRepPrimAPI_MakeTorus(
	// 	[Const] Standard_Real R1,
	// 	[Const] Standard_Real R2,
	// 	[Const] Standard_Real angle
	// );
	// void BRepPrimAPI_MakeTorus(
	// 	[Const] Standard_Real R1,
	// 	[Const] Standard_Real R2,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2
	// );
	// void BRepPrimAPI_MakeTorus(
	// 	[Const] Standard_Real R1,
	// 	[Const] Standard_Real R2,
	// 	[Const] Standard_Real angle1,
	// 	[Const] Standard_Real angle2,
	// 	[Const] Standard_Real angle
	// );
	void BRepPrimAPI_MakeTorus(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R1,
		[Const] Standard_Real R2
	);
	void BRepPrimAPI_MakeTorus(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real angle
	);
	void BRepPrimAPI_MakeTorus(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real angle1,
		[Const] Standard_Real angle2
	);
	void BRepPrimAPI_MakeTorus(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real R1,
		[Const] Standard_Real R2,
		[Const] Standard_Real angle1,
		[Const] Standard_Real angle2,
		[Const] Standard_Real angle
	);
	// [Value] Standard_Address OneAxis();
	// [Ref] BRepPrim_Torus Torus();
};
BRepPrimAPI_MakeTorus implements BRepPrimAPI_MakeOneAxis;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepPrimAPI_MakeWedge {
	void BRepPrimAPI_MakeWedge(
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz,
		[Const] Standard_Real ltx
	);
	void BRepPrimAPI_MakeWedge(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz,
		[Const] Standard_Real ltx
	);
	void BRepPrimAPI_MakeWedge(
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz,
		[Const] Standard_Real xmin,
		[Const] Standard_Real zmin,
		[Const] Standard_Real xmax,
		[Const] Standard_Real zmax
	);
	void BRepPrimAPI_MakeWedge(
		[Const, Ref] gp_Ax2 Axes,
		[Const] Standard_Real dx,
		[Const] Standard_Real dy,
		[Const] Standard_Real dz,
		[Const] Standard_Real xmin,
		[Const] Standard_Real zmin,
		[Const] Standard_Real xmax,
		[Const] Standard_Real zmax
	);
	// [Ref] BRepPrim_Wedge Wedge();
	void Build();
	[Const, Ref] TopoDS_Shell Shell();
	[Const, Ref] TopoDS_Solid Solid();
};
BRepPrimAPI_MakeWedge implements BRepBuilderAPI_MakeShape;

interface BRepPrim_Sphere {
};

interface GeomAPI_PointsToBSpline {
	void GeomAPI_PointsToBSpline(
		[Const, Ref] TColgp_Array1OfPnt Points, 
		[Const] optional Standard_Integer DegMin = 3, 
		[Const] optional Standard_Integer DegMax = 8, 
		[Const] optional GeomAbs_Shape Continuity = "GeomAbs_C2", 
		[Const] optional Standard_Real Tol3D = 1.0e-3
	);
	[Const, Ref] Handle_Geom_BSplineCurve Curve();
	[Const] Standard_Boolean IsDone();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Shape{
	void TopoDS_Shape();
	void TopoDS_Shape([Const, Ref] TopoDS_Shape T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
	// void TShape([Const, Ref] Handle_TopoDS_TShape theTShape);
	//void DumpJson(
	//	[Ref]   Standard_OStream theFSStream,
	//	[Const] optional Standard_Integer theDepth = -1
	//);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GProp_GProps{
	void GProp_GProps();
	void GProp_GProps([Const, Ref] gp_Pnt SystemLocation);
	Standard_Real Mass();
	[Value] gp_Pnt CentreOfMass();
	// [Value] gp_Mat MatrixOfInertia();
	// void StaticMoments(
	// 	[Ref] Standard_Real Ix,
	// 	[Ref] Standard_Real Iy,
	// 	[Ref] Standard_Real Iz
	// );
	Standard_Real MomentOfInertia([Const, Ref] gp_Ax1 A1);
	// GProp_PrincipalProps PrincipalProperties();
	Standard_Real RadiusOfGyration([Const, Ref] gp_Ax1 A);
	void StaticMoments(
		Standard_Real Ix,
		Standard_Real Iy,
		Standard_Real Iz
	);
	// Standard_Real MomentOfInertia([Const, Ref] gp_Ax1);
	// [Value] GProp_PrincipalProps PrincipalProperties();
	// Standard_Real RadiusOfGyration([Const, Ref] gp_Ax1 A);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepGProp{
	static void LinearProperties(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps LProps,
		[Const] optional Standard_Boolean SkipShared = false,
		[Const] optional Standard_Boolean UseTriangulation = false
	);
	static void SurfaceProperties(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps SProps,
		[Const] optional Standard_Boolean SkipShared = false,
		[Const] optional Standard_Boolean UseTriangulation = false
	);
	static Standard_Real SurfaceProperties2(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps SProps,
		[Const] Standard_Real Eps,
		[Const] optional Standard_Boolean SkipShared = false
	);
	static void VolumeProperties(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps VProps,
		[Const] optional Standard_Boolean OnlyClosed = false,
		[Const] optional Standard_Boolean SkipShared = false,
		[Const] optional Standard_Boolean UseTriangulation = false
	);
	static Standard_Real VolumeProperties2(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps VProps,
		[Const] Standard_Real Eps,
		[Const] optional Standard_Boolean OnlyClosed = false,
		[Const] optional Standard_Boolean SkipShared = false
	);
	static Standard_Real VolumePropertiesGK(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps VProps,
		[Const] optional Standard_Real Eps = 0.001,
		[Const] optional Standard_Boolean OnlyClosed = false,
		[Const] optional Standard_Boolean IsUseSpan = false,
		[Const] optional Standard_Boolean CGFlag = false,
		[Const] optional Standard_Boolean IFlag = false,
		[Const] optional Standard_Boolean SkipShared = false
	);
	static Standard_Real VolumePropertiesGK2(
		[Const, Ref] TopoDS_Shape S,
		[Ref] GProp_GProps VProps,
		[Const, Ref] gp_Pln thePln,
		[Const] optional Standard_Real Eps = 0.001,
		[Const] optional Standard_Boolean OnlyClosed = false,
		[Const] optional Standard_Boolean IsUseSpan = false,
		[Const] optional Standard_Boolean CGFlag = false,
		[Const] optional Standard_Boolean IFlag = false,
		[Const] optional Standard_Boolean SkipShared = false
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface gp_Pln{
	void gp_Pln();
	// void gp_Pln([Const, Ref] gp_Ax3 A3);
	void gp_Pln(
		[Const, Ref] gp_Pnt P,
		[Const, Ref] gp_Dir V
	);
	void Coefficients(
		Standard_Real A,
		Standard_Real B,
		Standard_Real C,
		Standard_Real D
	);
	void SetAxis([Const, Ref] gp_Ax1 A1);
	void SetLocation([Const, Ref] gp_Pnt Loc);
	// void SetPosition([Const, Ref] gp_Ax3 A3);
	void UReverse();
	void VReverse();
	Standard_Boolean Direct();
	[Const, Ref] gp_Ax1 Axis();
	[Const, Ref] gp_Pnt Location();
	// [Const, Ref] gp_Ax3 Position();
	Standard_Real Distance([Const, Ref] gp_Pnt P);
	// Standard_Real Distance([Const, Ref] gp_Lin L);
	// Standard_Real Distance([Const, Ref] gp_Pln Other);
	Standard_Real SquareDistance([Const, Ref] gp_Pnt P);
	// Standard_Real SquareDistance([Const, Ref] gp_Lin L);
	// Standard_Real SquareDistance([Const, Ref] gp_Pln Other);
	[Value] gp_Ax1 XAxis();
	[Value] gp_Ax1 YAxis();
	Standard_Boolean Contains(
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real LinearTolerance
	);
	Standard_Boolean Contains(
		[Const, Ref] gp_Lin L,
		[Const] Standard_Real LinearTolerance,
		[Const] Standard_Real AngularTolerance
	);
	void Mirror([Const, Ref] gp_Pnt P);
	[Value] gp_Pln Mirrored([Const, Ref] gp_Pnt P);
	// void Mirror([Const, Ref] gp_Ax1 A1);
	// [Value] gp_Pln Mirrored([Const, Ref] gp_Ax1 A1);
	// void Mirror([Const, Ref] gp_Ax2 A2);
	// [Value] gp_Pln Mirrored([Const, Ref] gp_Ax2 A2);
	void Rotate(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	[Value] gp_Pln Rotated(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	void Scale(
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real S
	);
	[Value] gp_Pln Scaled(
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real S
	);
	void Transform([Const, Ref] gp_Trsf T);
	[Value] gp_Pln Transformed([Const, Ref] gp_Trsf T);
	void Translate([Const, Ref] gp_Vec V);
	[Value] gp_Pln Translated([Const, Ref] gp_Vec V);
	void Translate(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2
	);
	[Value] gp_Pln Translated(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2
	);
};

// BRepMesh_IncrementalMesh.hxx
interface BRepMesh_IncrementalMesh{
	void BRepMesh_IncrementalMesh();
	void BRepMesh_IncrementalMesh(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] Standard_Real theLinDeflection
	);
	void BRepMesh_IncrementalMesh(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] Standard_Real theLinDeflection,
		[Const] Standard_Boolean isRelative
	);
	void BRepMesh_IncrementalMesh(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] Standard_Real theLinDeflection,
		[Const] Standard_Boolean isRelative,
		[Const] Standard_Real theAngDeflection
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Bnd_Box {
	void Bnd_Box();
	void Bnd_Box(
		[Const, Ref] gp_Pnt theMin,
		[Const, Ref] gp_Pnt theMax
	);
	void SetWhole();
	void SetVoid();
	void Set([Const, Ref] gp_Pnt P);
	void Set(
		[Const, Ref] gp_Pnt P,
		[Const, Ref] gp_Dir D
	);
	void Update(
		[Const] Standard_Real aXMin,
		[Const] Standard_Real aYMin,
		[Const] Standard_Real aZMin,
		[Const] Standard_Real aXMax,
		[Const] Standard_Real aYMax,
		[Const] Standard_Real aZMax
	);
	void Update(
		[Const] Standard_Real X,
		[Const] Standard_Real Y,
		[Const] Standard_Real Z
	);
	Standard_Real GetGap();
	void SetGap([Const] Standard_Real Tol);
	void Enlarge([Const] Standard_Real Tol);
	// void Get(
	// 	[Ref] Standard_Real theXmin,
	// 	[Ref] Standard_Real theYmin,
	// 	[Ref] Standard_Real theZmin,
	// 	[Ref] Standard_Real theXmax,
	// 	[Ref] Standard_Real theYmax,
	// 	[Ref] Standard_Real theZmax
	// );
	Standard_Real GetXmin();
	Standard_Real GetXmax();
	Standard_Real GetYmin();
	Standard_Real GetYmax();
	Standard_Real GetZmin();
	Standard_Real GetZmax();
	[Value] gp_Pnt CornerMin();
	[Value] gp_Pnt CornerMax();
	void OpenXmin();
	void OpenXmax();
	void OpenYmin();
	void OpenYmax();
	void OpenZmin();
	void OpenZmax();
	Standard_Boolean IsOpen();
	Standard_Boolean IsOpenXmin();
	Standard_Boolean IsOpenXmax();
	Standard_Boolean IsOpenYmin();
	Standard_Boolean IsOpenYmax();
	Standard_Boolean IsOpenZmin();
	Standard_Boolean IsOpenZmax();
	Standard_Boolean IsWhole();
	Standard_Boolean IsVoid();
	Standard_Boolean IsXThin([Const] Standard_Real tol);
	Standard_Boolean IsYThin([Const] Standard_Real tol);
	Standard_Boolean IsZThin([Const] Standard_Real tol);
	Standard_Boolean IsThin([Const] Standard_Real tol);
	[Value] Bnd_Box Transformed([Const, Ref] gp_Trsf T);
	void Add([Const, Ref] Bnd_Box Other);
	// void Add([Const, Ref] gp_Pnt P);
	void Add(
		[Const, Ref] gp_Pnt P,
		[Const, Ref] gp_Dir D
	);
	// void Add([Const, Ref] gp_Dir D);
	Standard_Boolean IsOut([Const, Ref] gp_Pnt P);
	// Standard_Boolean IsOut([Const, Ref] gp_Lin L);
	// Standard_Boolean IsOut([Const, Ref] gp_Pln L);
	// Standard_Boolean IsOut([Const, Ref] Bnd_Box Other);
	Standard_Boolean IsOut(
		[Const, Ref] Bnd_Box Other,
		[Const, Ref] gp_Trsf T
	);
	Standard_Boolean IsOut(
		[Const, Ref] gp_Trsf T1,
		[Const, Ref] Bnd_Box Other,
		[Const, Ref] gp_Trsf T2
	);
	// Standard_Boolean IsOut(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const, Ref] gp_Dir D
	// );
	Standard_Real Distance([Const, Ref] Bnd_Box Other);
	void Dump();
	Standard_Real SquareExtent();
	[Value] Bnd_Box FinitePart();
	Standard_Boolean HasFinitePart();
	// void DumpJson(
	// 	[Ref] Standard_OStream theOStream,
	// 	[Const] optional Standard_Integer theDepth -1
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Bnd_OBB {
	void Bnd_OBB();
	void Bnd_OBB(
		[Const, Ref] gp_Pnt theCenter,
		[Const, Ref] gp_Dir theXDirection,
		[Const, Ref] gp_Dir theYDirection,
		[Const, Ref] gp_Dir theZDirection,
		[Const] Standard_Real theHXSize,
		[Const] Standard_Real theHYSize,
		[Const] Standard_Real theHZSize
	);
	void Bnd_OBB([Const, Ref] Bnd_Box theBox);
	void ReBuild(
		[Const, Ref] TColgp_Array1OfPnt theListOfPoints,
		[Const] TColStd_Array1OfReal theListOfTolerances,
		[Const] optional Standard_Boolean theIsOptimal = false
	);
	void SetCenter([Const, Ref] gp_Pnt theCenter);
	void SetXComponent(
		[Const, Ref] gp_Dir theXDirection,
		[Const] Standard_Real theHXSize
	);
	void SetYComponent(
		[Const, Ref] gp_Dir theYDirection,
		[Const] Standard_Real theHYSize
	);
	void SetZComponent(
		[Const, Ref] gp_Dir theZDirection,
		[Const] Standard_Real theHZSize
	);
	// [Value] gp_Ax3 Position();
	// [Const, Ref] gp_XYZ Center();
	// [Const, Ref] gp_XYZ XDirection();
	// [Const, Ref] gp_XYZ YDirection();
	// [Const, Ref] gp_XYZ ZDirection();
	Standard_Real XHSize();
	Standard_Real YHSize();
	Standard_Real ZHSize();
	Standard_Boolean IsVoid();
	void SetVoid();
	void SetAABox([Const] Standard_Boolean theFlag);
	Standard_Boolean IsAABox();
	void Enlarge([Const] Standard_Real theGapAdd);
	Standard_Boolean GetVertex(gp_Pnt theP);
	Standard_Real SquareExtent();
	Standard_Boolean IsOut([Const, Ref] Bnd_OBB theOther);
	// Standard_Boolean IsOut([Const, Ref] gp_Pnt theP);
	Standard_Boolean IsCompletelyInside([Const, Ref] Bnd_OBB theOther);
	void Add([Const, Ref] Bnd_OBB theOther);
	// void Add([Const, Ref] gp_Pnt theP);
	// void DumpJson(
	// 	[Ref] Standard_OStream theOStream,
	// 	[Const] Standard_Integer theDepth = -1
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBndLib {
	void BRepBndLib();
	static void Add(
		[Const, Ref] TopoDS_Shape S,
		[Ref] Bnd_Box B,
		[Const] optional Standard_Boolean useTriangulation = true
	);
	static void AddClose(
		[Const, Ref] TopoDS_Shape S,
		[Ref] Bnd_Box B
	);
	static void AddOptimal(
		[Const, Ref] TopoDS_Shape S,
		[Ref] Bnd_Box B,
		[Const] optional Standard_Boolean useTriangulation = true,
		[Const] optional Standard_Boolean useShapeToerance = false
	);
	static void AddOBB(
		[Const, Ref] TopoDS_Shape theS,
		[Ref] Bnd_OBB theOBB,
		[Const] optional Standard_Boolean theIsTriangulationUsed = true,
		[Const] optional Standard_Boolean theIsOptimal = false,
		[Const] optional Standard_Boolean theIsShapeToleranceUsed = true
	);
};

interface gp_Vec{
	void gp_Vec(
		[Const]Standard_Real Xv,
		[Const]Standard_Real Yv,
		[Const]Standard_Real Zv
	);
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
};

interface Geom_Circle{
	void Geom_Circle(
		[Const, Ref] gp_Circ C
	);
	void Geom_Circle(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real Radius
	);
	Standard_Real Radius();
};
Geom_Circle implements Geom_Conic;

interface Geom_Ellipse {
	void Geom_Ellipse(
		[Const, Ref] gp_Elips C
	);
	void Geom_Ellipse(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	Standard_Real MajorRadius();
	Standard_Real MinorRadius();
};
Geom_Ellipse implements Geom_Conic;

interface Geom_Hyperbola {
	void Geom_Hyperbola(
		[Const, Ref] gp_Hypr C
	);
	void Geom_Hyperbola(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	Standard_Real MajorRadius();
	Standard_Real MinorRadius();
};
Geom_Hyperbola implements Geom_Conic;

interface Geom_Parabola {
	void Geom_Parabola(
		[Const, Ref] gp_Parab C
	);
	void Geom_Parabola(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real Focal
	);
	Standard_Real Focal();
};
Geom_Parabola implements Geom_Conic;

interface Geom_Conic {};
Geom_Conic implements Geom_Curve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface gp_Pnt {
	void gp_Pnt();
	// void gp_Pnt([Const, Ref] gp_XYZ Coord);
	void gp_Pnt(
		[Const] Standard_Real Xp,
		[Const] Standard_Real Yp,
		[Const] Standard_Real Zp
	);
	void SetCoord(
		[Const] Standard_Integer Index,
		[Const] Standard_Real Xi
	);
	void SetCoord(
		[Const] Standard_Real Xp,
		[Const] Standard_Real Yp,
		[Const] Standard_Real Zp
	);
	void SetX([Const] Standard_Real X);
	void SetY([Const] Standard_Real Y);
	void SetZ([Const] Standard_Real Z);
	// void SetXYZ([Const, Ref] gp_XYZ Coord);
	Standard_Real Coord([Const] Standard_Integer Index);
	// void Coord(
	//   [Ref] Standard_Real Xp,
	//   [Ref] Standard_Real Yp,
	//   [Ref] Standard_Real Zp
	// );
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
	// [Const, Ref] gp_XYZ XYZ();
	// [Const, Ref] gp_XYZ Coord();
	// [Ref] gp_XYZ ChangeCoord();
	void BaryCenter(
		[Const] Standard_Real Alpha,
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real Beta
	);
	Standard_Boolean IsEqual(
		[Const, Ref] gp_Pnt Other,
		[Const] Standard_Real LinearTolerance
	);
	Standard_Real Distance([Const, Ref] gp_Pnt Other);
	Standard_Real SquareDistance([Const, Ref] gp_Pnt Other);
	void Mirror([Const, Ref] gp_Pnt P);
	// [Value] gp_Pnt Mirrored([Const, Ref] gp_Pnt P);
	// void Mirror([Const, Ref] gp_Ax1 A1);
	// [Value] gp_Pnt Mirrored([Const, Ref] gp_Ax1 A1);
	// void Mirror([Const, Ref] gp_Ax2 A2);
	// [Value] gp_Pnt Mirrored([Const, Ref] gp_Ax2 A1);
	void Rotate(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	[Value] gp_Pnt Rotated(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	void Scale(
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real S
	);
	[Value] gp_Pnt Scaled(
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real S
	);
	void Transform([Const, Ref] gp_Trsf T);
	[Value] gp_Pnt Transformed([Const, Ref] gp_Trsf T);
	[Value] gp_Pnt Translated([Const, Ref] gp_Vec V);
	[Value] gp_Pnt Translated(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2
	);
};

interface gp_XYZ {
	//void gp_XYZ();
	// void gp_Pnt([Const, Ref] gp_XYZ Coord);
	void gp_XYZ(
		[Const] Standard_Real X,
		[Const] Standard_Real Y,
		[Const] Standard_Real Z
	);
	//void SetCoord(
	//	[Const] Standard_Integer Index,
	//	[Const] Standard_Real Xi
	//);
	void SetCoord(
		[Const] Standard_Real Xp,
		[Const] Standard_Real Yp,
		[Const] Standard_Real Zp
	);
	void SetX([Const] Standard_Real X);
	void SetY([Const] Standard_Real Y);
	void SetZ([Const] Standard_Real Z);
	// void SetXYZ([Const, Ref] gp_XYZ Coord);
	Standard_Real Coord([Const] Standard_Integer Index);
	// void Coord(
	//   [Ref] Standard_Real Xp,
	//   [Ref] Standard_Real Yp,
	//   [Ref] Standard_Real Zp
	// );
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
	// [Const, Ref] gp_XYZ XYZ();
	// [Const, Ref] gp_XYZ Coord();
	// [Ref] gp_XYZ ChangeCoord();
	Standard_Boolean IsEqual(
		[Const, Ref] gp_XYZ Other,
		[Const] Standard_Real Tolerance
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeArcOfCircle {
	void GC_MakeArcOfCircle(
		[Const, Ref] gp_Circ Circ,
		[Const] Standard_Real Alpha1,
		[Const] Standard_Real Alpha2,
		[Const] Standard_Boolean Sense
	);
	// void GC_MakeArcOfCircle(
	// 	[Const, Ref] gp_Circ Circ,
	// 	[Const, Ref] gp_Pnt P,
	// 	[Const] Standard_Real Alpha,
	// 	[Const] Standard_Boolean Sense
	// );
	// void GC_MakeArcOfCircle(
	// 	[Const, Ref] gp_Circ Circ,
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const] Standard_Boolean Sense
	// );
	//void GC_MakeArcOfCircle(
	//	[Const, Ref] gp_Pnt P1,
	//	[Const, Ref] gp_Pnt P2,
	//	[Const, Ref] gp_Pnt P3
	//);
	void GC_MakeArcOfCircle(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2,
		[Const, Ref] gp_Pnt P3
	);
	[Const, Ref] Handle_Geom_TrimmedCurve Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeSegment{
	void GC_MakeSegment(
		[Const, Ref] gp_Pnt P1,
		[Const, Ref] gp_Pnt P2
	);
	void GC_MakeSegment(
		[Const, Ref] gp_Lin Line,
		[Const] Standard_Real U1,
		[Const] Standard_Real U2
	);
	// void GC_MakeSegment(
	// 	[Const, Ref] gp_Lin Line,
	// 	[Const, Ref] gp_Pnt Point,
	// 	[Const] Standard_Real Ulast
	// );
	// void GC_MakeSegment(
	// 	[Const, Ref] gp_Lin Line,
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2
	// );
	[Const, Ref] Handle_Geom_TrimmedCurve Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeCircle {
	void GC_MakeCircle(
		[Const, Ref] gp_Circ Circ
	);
	void GC_MakeCircle(
		[Const, Ref] gp_Ax2 A2, 
		[Const] Standard_Real Radius
	);
	[Const, Ref] Handle_Geom_Circle Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeEllipse {
	void GC_MakeEllipse(
		[Const, Ref] gp_Elips E
	);
	void GC_MakeEllipse(
		[Const, Ref] gp_Ax2 A2, 
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	[Const, Ref] Handle_Geom_Ellipse Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeHyperbola {
	void GC_MakeHyperbola(
		[Const, Ref] gp_Hypr E
	);
	void GC_MakeHyperbola(
		[Const, Ref] gp_Ax2 A2, 
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	[Const, Ref] Handle_Geom_Hyperbola Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GC_MakeArcOfParabola {
	void GC_MakeArcOfParabola(
		[Const, Ref] gp_Parab Parab,
		[Const] Standard_Real Alpha1,
		[Const] Standard_Real Alpha2,
		[Const] Standard_Boolean Sense
	);
	[Const, Ref] Handle_Geom_TrimmedCurve Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Edge{
	void TopoDS_Edge();
	void TopoDS_Edge([Const, Ref] TopoDS_Edge T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Edge implements TopoDS_Shape;


// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Wire{
	void TopoDS_Wire();
	void TopoDS_Wire([Const, Ref] TopoDS_Wire T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Wire implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Compound {
	void TopoDS_Compound();
	void TopoDS_Compound([Const, Ref] TopoDS_Compound T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Compound implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Face{
	void TopoDS_Face();
	void TopoDS_Face([Const, Ref] TopoDS_Face T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Face implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Vertex {
	void TopoDS_Vertex();
	void TopoDS_Vertex([Const, Ref] TopoDS_Vertex T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Vertex implements TopoDS_Shape;

interface gp_Ax1{
	void gp_Ax1();
	void gp_Ax1(
		[Const,Ref]gp_Pnt P,
		[Const,Ref]gp_Dir V
	);
};

interface gp_Ax2{
	void gp_Ax2();
	void gp_Ax2(
		[Const,Ref]gp_Pnt P,
		[Const,Ref]gp_Dir V
	);
};

interface gp {
	[Const, Ref] static gp_Ax1 OX();
	[Const,Ref] static gp_Dir DZ();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface gp_Dir{
	void gp_Dir();
	void gp_Dir([Const, Ref] gp_Vec V);
	// void gp_Dir([Const, Ref] gp_XYZ Coord);
	void gp_Dir(
		[Const] Standard_Real Xv,
		[Const] Standard_Real Yv,
		[Const] Standard_Real Zv
	);
	void SetCoord(
		[Const] Standard_Integer Index,
		[Const] Standard_Real Xi
	);
	void SetCoord(
		[Const] Standard_Real Xv,
		[Const] Standard_Real Yv,
		[Const] Standard_Real Zv
	);
	void SetX([Const] Standard_Real X);
	void SetY([Const] Standard_Real Y);
	void SetZ([Const] Standard_Real Z);
	// void SetXYZ([Const, Ref] gp_XYZ Coord);
	Standard_Real Coord([Const] Standard_Integer Index);
	// void Coord(
	//   [Ref] Standard_Real Xv,
	//   [Ref] Standard_Real Yv,
	//   [Ref] Standard_Real Zv
	// );
	Standard_Real X();
	Standard_Real Y();
	Standard_Real Z();
	// [Const, Ref] gp_XYZ XYZ();
	Standard_Boolean IsEqual(
		[Const, Ref] gp_Dir Other,
		[Const] Standard_Real AngularTolerance
	);
	Standard_Boolean IsNormal(
		[Const, Ref] gp_Dir Other,
		[Const] Standard_Real AngularTolerance
	);
	Standard_Boolean IsOpposite(
		[Const, Ref] gp_Dir Other,
		[Const] Standard_Real AngularTolerance
	);
	Standard_Boolean IsParallel(
		[Const, Ref] gp_Dir Other,
		[Const] Standard_Real AngularTolerance
	);
	Standard_Real Angle([Const, Ref] gp_Dir Other);
	Standard_Real AngleWithRef(
		[Const, Ref] gp_Dir Other,
		[Const, Ref] gp_Dir VRef
	);
	void Cross([Const, Ref] gp_Dir Right);
	// void operator ^= ([Const, Ref] gp_Dir Right);
	[Value] gp_Dir Crossed([Const, Ref] gp_Dir Right);
	// [Value] gp_Dir operator ^ ([Const, Ref] Right);
	void CrossCross(
		[Const, Ref] gp_Dir V1,
		[Const, Ref] gp_Dir V2
	);
	[Value] gp_Dir CrossCrossed(
		[Const, Ref] gp_Dir V1,
		[Const, Ref] gp_Dir V2
	);
	Standard_Real Dot([Const, Ref] gp_Dir Other);
	// void Standard_Real operator * ([Const, Ref] gp_Dir Other);
	Standard_Real DotCross(
		[Const, Ref] gp_Dir V1,
		[Const, Ref] gp_Dir V2
	);
	[Value] gp_Dir Reversed();
	// [Value] gp_Dir operator -();
	void Mirror([Const, Ref] gp_Dir V);
	[Value] gp_Dir Mirrored([Const, Ref] gp_Dir V);
	// void Mirror([Const, Ref] gp_Ax1 A1);
	// [Value] gp_Dir Mirrored([Const, Ref] gp_Ax1 A1);
	// void Mirror([Const ,Ref] gp_Ax2 A2);
	// [Value] gp_Dir Mirrored([Const, Ref] gp_Ax2 A1);
	void Rotate(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	[Value] gp_Dir Rotated(
		[Const, Ref] gp_Ax1 A1,
		[Const] Standard_Real Ang
	);
	void Transform([Const, Ref] gp_Trsf T);
	[Value] gp_Dir Transformed([Const, Ref] gp_Trsf T);
};

interface gp_Trsf{
	void gp_Trsf();
	void SetMirror([Const, Ref]gp_Ax1 A1);
	void SetTranslation([Const, Ref]gp_Vec V);
	void SetTranslationPart([Const, Ref]gp_Vec V);
	void SetRotation([Const, Ref]gp_Ax1 A1, [Const]Standard_Real Ang);
	void SetScaleFactor([Const]Standard_Real S);
	void Multiply([Const, Ref]gp_Trsf T);
	void PreMultiply([Const, Ref]gp_Trsf T);
	[Const] Standard_Real Value ([Const] Standard_Integer Row, [Const] Standard_Integer Col);
	[Value] gp_Trsf Inverted();
	[Const, Ref] gp_XYZ TranslationPart();
	[Const] Standard_Real ScaleFactor();
	[Value] gp_Trsf Multiplied([Const, Ref]gp_Trsf T);
};

interface BRepBuilderAPI_Transform{
	void BRepBuilderAPI_Transform(
		[Const, Ref] TopoDS_Shape S,
		[Const, Ref] gp_Trsf T,
		[Const] optional Standard_Boolean Copy = false
	);
};
BRepBuilderAPI_Transform implements BRepBuilderAPI_ModifyShape;

interface BRepBuilderAPI_ModifyShape{

};
BRepBuilderAPI_ModifyShape implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS {
	[Const, Ref] TopoDS_Vertex Vertex([Const, Ref] TopoDS_Shape S);
  [Const, Ref] static TopoDS_Edge Edge([Const, Ref] TopoDS_Shape S);
  [Const, Ref] static TopoDS_Wire Wire([Const, Ref] TopoDS_Shape S);
  [Const, Ref] static TopoDS_Face Face([Const, Ref] TopoDS_Shape S);
  [Const, Ref] TopoDS_Shell Shell([Const, Ref] TopoDS_Shape S);
  [Const, Ref] TopoDS_Solid Solid([Const, Ref] TopoDS_Shape S);
  [Const, Ref] TopoDS_CompSolid CompSolid([Const, Ref] TopoDS_Shape S);
  [Const, Ref] TopoDS_Compound Compound([Const, Ref] TopoDS_Shape S);
};

interface BRepBuilderAPI_MakeFace{
	void BRepBuilderAPI_MakeFace(
		[Const, Ref]TopoDS_Wire W
	);

	void BRepBuilderAPI_MakeFace(
		[Const, Ref]TopoDS_Face F,
		[Const, Ref]TopoDS_Wire W
	);

	[Const,Ref] TopoDS_Face Face();
	void Add([Const,Ref]TopoDS_Wire W);
	[Const] BRepBuilderAPI_FaceError Error();
};

interface BRepFilletAPI_MakeFillet2d{
	void BRepFilletAPI_MakeFillet2d([Const, Ref]TopoDS_Face F);
	void AddFillet([Const,Ref]TopoDS_Vertex V, [Const] Standard_Real Radius);
	[Const] ChFi2d_ConstructionError Status();
};
BRepFilletAPI_MakeFillet2d implements BRepBuilderAPI_MakeShape;

interface BRepFilletAPI_MakeFillet{
	void BRepFilletAPI_MakeFillet([Const, Ref]TopoDS_Shape S);
	void Add([Const] Standard_Real Radius, [Const,Ref]TopoDS_Edge E);
};
BRepFilletAPI_MakeFillet implements BRepFilletAPI_LocalOperation;

interface BRepFilletAPI_MakeChamfer{
	void BRepFilletAPI_MakeChamfer([Const, Ref]TopoDS_Shape S);
	void Add(
		[Const] Standard_Real Dis,
		[Const,Ref]TopoDS_Edge E
	);
	void Add(
		[Const] Standard_Real Dis1,
		[Const] Standard_Real Dis2,
		[Const,Ref]TopoDS_Edge E,
		[Const,Ref]TopoDS_Face F
	);
};
BRepFilletAPI_MakeChamfer implements BRepFilletAPI_LocalOperation;

interface BRepFilletAPI_LocalOperation{};
BRepFilletAPI_LocalOperation implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopExp_Explorer {
	void TopExp_Explorer();
	void TopExp_Explorer(
		[Const, Ref] TopoDS_Shape S,
		[Const] TopAbs_ShapeEnum ToFind,
		[Const] optional TopAbs_ShapeEnum ToAvoid = "TopAbs_SHAPE"
	);
	void Init(
		[Const, Ref] TopoDS_Shape S,
		[Const] TopAbs_ShapeEnum ToFind,
		[Const] optional TopAbs_ShapeEnum ToAvoid = "TopAbs_SHAPE"
	);
	Standard_Boolean More();
	void Next();
	[Const, Ref] TopoDS_Shape Current();
	void ReInit();
	Standard_Integer Depth();
	void Clear();
	void Destroy();
};

interface TopLoc_Location {
	void TopLoc_Location();
	void TopLoc_Location([Const, Ref] gp_Trsf T);
	void Identity();
	Standard_Integer FirstPower();
	[Const, Ref] TopLoc_Location NextLocation();
	[Const, Ref] gp_Trsf Transformation();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Adaptor3d_Curve {
	Standard_Real FirstParameter();
	Standard_Real LastParameter();
	// [Value] GeomAbs_Shape Continuity();
	// Standard_Integer NbIntervals([Const] GeomAbs_Shape S);
	// void Intervals(
	// 	[Ref] TColStd_Array1OfReal T,
	// 	[Const] GeomAbs_Shape S
	// );
	// [Value] Handle_Adaptor3d_HCurve Trim(
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last,
	// 	[Const] Standard_Real Tol
	// );
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	[Value] gp_Pnt Value([Const] Standard_Real U);
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	void DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	Standard_Real Resolution([Const] Standard_Real R3d);
	// [Value] GeomAbs_CurveType GetType();
	[Value] gp_Lin Line();
	[Value] gp_Circ Circle();
	// [Value] gp_Elips Ellipse();
	// [Value] gp_Hypr Hyperbola();
	// [Value] gp_Parab Parabola();
	Standard_Integer Degree();
	Standard_Boolean IsRational();
	Standard_Integer NbPoles();
	Standard_Integer NbKnots();
	[Value] Handle_Geom_BezierCurve Bezier();
	[Value] Handle_Geom_BSplineCurve BSpline();
	// [Value] Handle_Geom_OffsetCurve OffsetCurve();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepAdaptor_Curve{
	void BRepAdaptor_Curve();
	void BRepAdaptor_Curve([Const, Ref] TopoDS_Edge E);
	void BRepAdaptor_Curve(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F
	);
	void Reset();
	void Initialize([Const, Ref] TopoDS_Edge E);
	void Initialize(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F
	);
	[Const, Ref] gp_Trsf Trsf();
	Standard_Boolean Is3DCurve();
	Standard_Boolean IsCurveOnSurface();
	// [Const, Ref] GeomAdaptor_Curve Curve();
	// [Const, Ref] Adaptor3d_CurveOnSurface CurveOnSurface();
	[Const, Ref] TopoDS_Edge Edge();
	Standard_Real Tolerance();
	Standard_Real FirstParameter();
	Standard_Real LastParameter();
	// [Value] GeomAbs_Shape Continuity();
	// Standard_Integer NbIntervals([Const] GeomAbs_Shape S);
	// void Intervals(
	// 	[Ref] TColStd_Array1OfReal T,
	// 	[Const] GeomAbs_Shape S
	// );
	// [Value] Handle_Adaptor3d_HCurve Trim(
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last,
	// 	[Const] Standard_Real Tol
	// );
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	[Value] gp_Pnt Value([Const] Standard_Real U);
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	void DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	Standard_Real Resolution([Const] Standard_Real R3d);
	// [Value] GeomAbs_CurveType GetType();
	[Value] gp_Lin Line();
	[Value] gp_Circ Circle();
	// [Value] gp_Elips Ellipse();
	// [Value] gp_Hypr Hyperbola();
	// [Value] gp_Parab Parabola();
	Standard_Integer Degree();
	Standard_Boolean IsRational();
	Standard_Integer NbPoles();
	Standard_Integer NbKnots();
	[Value] Handle_Geom_BezierCurve Bezier();
	[Value] Handle_Geom_BSplineCurve BSpline();
	// [Value] Handle_Geom_OffsetCurve OffsetCurve();
};
BRepAdaptor_Curve implements Adaptor3d_Curve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface GCPnts_TangentialDeflection{
	void GCPnts_TangentialDeflection();
	void GCPnts_TangentialDeflection(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] optional Standard_Integer MinimumOfPoints = 2,
		[Const] optional Standard_Real UTol = 1.0e-9,
		[Const] optional Standard_Real theMinLen = 1.0e-7
	);
	void GCPnts_TangentialDeflection(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real FirstParameter,
		[Const] Standard_Real LastParameter,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] Standard_Integer MinimumOfPoints,
		[Const] Standard_Real UTol,
		[Const] Standard_Real theMinLen
	);
	// void GCPnts_TangentialDeflection(
	// 	[Const, Ref] Adaptor2d_Curve C,
	// 	[Const] Standard_Real AngularDeflection,
	// 	[Const] Standard_Real CurvatureDeflection,
	// 	[Const] optional Standard_Integer MinimumOfPoints = 2,
	// 	[Const] optional Standard_Real UTol = 1.0e-9,
	// 	[Const] optional Standard_Real theMinLen = 1.0e-7
	// );
	// void GCPnts_TangentialDeflection(
	// 	[Const, Ref] Adaptor2d_Curve C,
	// 	[Const] Standard_Real FirstParameter,
	// 	[Const] Standard_Real LastParameter,
	// 	[Const] Standard_Real AngularDeflection,
	// 	[Const] Standard_Real CurvatureDeflection,
	// 	[Const] optional Standard_Integer MinimumOfPoints = 2,
	// 	[Const] optional Standard_Real UTol = 1.0e-9,
	// 	[Const] optional Standard_Real theMinLen = 1.0e-7
	// );
	void Initialize(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] optional Standard_Integer MinimumOfPoints = 2,
		[Const] optional Standard_Real UTol = 1.0e-9,
		[Const] optional Standard_Real theMinLen = 1.0e-7
	);
	void Initialize(
		[Const, Ref] Adaptor3d_Curve C,
		[Const] Standard_Real FirstParameter,
		[Const] Standard_Real LastParameter,
		[Const] Standard_Real AngularDeflection,
		[Const] Standard_Real CurvatureDeflection,
		[Const] Standard_Integer MinimumOfPoints,
		[Const] Standard_Real UTol,
		[Const] Standard_Real theMinLen
	);
	// void Initialize(
	// 	[Const, Ref] Adaptor2d_Curve C,
	// 	[Const] Standard_Real AngularDeflection,
	// 	[Const] Standard_Real CurvatureDeflection,
	// 	[Const] optional Standard_Integer MinimumOfPoints = 2,
	// 	[Const] optional Standard_Real UTol = 1.0e-9,
	// 	[Const] optional Standard_Real theMinLen = 1.0e-7
	// );
	// void Initialize(
	// 	[Const, Ref] Adaptor2d_Curve C,
	// 	[Const] Standard_Real FirstParameter,
	// 	[Const] Standard_Real LastParameter,
	// 	[Const] Standard_Real AngularDeflection,
	// 	[Const] Standard_Real CurvatureDeflection,
	// 	[Const] optional Standard_Integer MinimumOfPoints = 2,
	// 	[Const] optional Standard_Real UTol = 1.0e-9,
	// 	[Const] optional Standard_Real theMinLen = 1.0e-7
	// );
	Standard_Integer AddPoint(
		[Const, Ref] gp_Pnt thePnt,
		[Const] Standard_Real theParam,
		[Const] optional Standard_Boolean theIsReplace = true
	);
	Standard_Integer NbPoints();
	Standard_Real Parameter([Const] Standard_Integer I);
	[Value] gp_Pnt Value([Const] Standard_Integer I);
	Standard_Real ArcAngularStep(
		[Const] Standard_Real theRadius,
		[Const] Standard_Real theLinearDeflection,
		[Const] Standard_Real theAngularDeflection,
		[Const] Standard_Real theMinLength
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Geom_Curve{
	void Reverse();
	Standard_Real ReversedParameter([Const] Standard_Real U);
	Standard_Real TransformedParameter(
		[Const] Standard_Real U,
		[Const, Ref] gp_Trsf T
	);
	Standard_Real ParametricTransformation([Const, Ref] gp_Trsf T);
	[Value] Handle_Geom_Curve Reversed();
	Standard_Real FirstParameter();
	Standard_Real LastParameter();
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	// [Value] GeomAbs_Shape Continuity();
	Standard_Boolean IsCN([Const] Standard_Integer N);
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	void DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	[Value] gp_Pnt Value([Const] Standard_Real U);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRep_Tool {
	static Standard_Boolean IsClosed([Const, Ref] TopoDS_Shape S);
	// [Const, Ref] static Handle_Geom_Surface Surface(
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Ref] TopLoc_Location L
	// );
	[Value] Handle_Geom_Surface Surface([Const, Ref] TopoDS_Face F);
	[Const, Ref] static Handle_Poly_Triangulation Triangulation(
		[Const, Ref] TopoDS_Face F,
		[Ref] TopLoc_Location L
	);
	static Standard_Real Tolerance([Const, Ref] TopoDS_Face F);
	static Standard_Boolean NaturalRestriction([Const, Ref] TopoDS_Face F);
	static Standard_Boolean IsGeometric([Const, Ref] TopoDS_Edge E);
	[Const, Ref] static Handle_Geom_Curve Curve(
		[Const, Ref] TopoDS_Edge E,
		[Ref] TopLoc_Location L,
		Standard_Real First,
		Standard_Real Last
	);
	// [Value] static Handle_Geom_Curve Curve(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last
	// );
	[Const, Ref] static Handle_Poly_Polygon3D Polygon3D(
		[Const, Ref] TopoDS_Edge E,
		[Ref] TopLoc_Location L
	);
	// [Value] static Handle_Geom2d_Curve CurveOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last,
	// 	[Ref] Standard_Boolean theIsStored
	// );
	// [Value] static Handle_Geom2d_Curve CurveOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last,
	// 	[Ref] Standard_Boolean theIsStored
	// );
	// [Value] static Handle_Geom2d_Curve CurveOnPlane(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last,
	// );
	// static void CurveOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_Curve C,
	// 	[Ref] Handle_Geom_Surface S,
	// 	[Ref] TopLoc_Location L,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last
	// );
	// static void CurveOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_Curve C,
	// 	[Ref] Handle_Geom_Surface S,
	// 	[Ref] TopLoc_Location L,
	// 	[Ref] Standard_Real First,
	// 	[Ref] Standard_Real Last,
	//	[Const] Standard_Integer Index
	// );
	// [Value] static Handle_Poly_Polygon2D PolygonOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F
	// );
	// [Value] static Handle_Poly_Polygon2D PolygonOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	//	[Const, Ref] TopLoc_Location L
	// );
	// static void PolygonOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Handle_Poly_Polygon2D C,
	// 	[Ref] Handle_Geom_Surface S,
	// 	[Ref] TopLoc_Location L
	// );
	// static void PolygonOnSurface(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Handle_Poly_Polygon2D C,
	// 	[Ref] Handle_Geom_Surface S,
	// 	[Ref] TopLoc_Location L,
	// 	[Const] Standard_Integer Index
	// );
	[Const, Ref] static Handle_Poly_PolygonOnTriangulation PolygonOnTriangulation(
		[Const, Ref] TopoDS_Edge E,
		[Ref] Handle_Poly_Triangulation T,
		[Const, Ref] TopLoc_Location L
	);
	// [Const, Ref] Handle_Poly_PolygonOnTriangulation PolygonOnTriangulation(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Handle_Poly_PolygonOnTriangulation P,
	// 	[Ref] Handle_Poly_Triangulation T,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// [Const, Ref] Handle_Poly_PolygonOnTriangulation PolygonOnTriangulation(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Handle_Poly_PolygonOnTriangulation P,
	// 	[Ref] Handle_Poly_Triangulation T,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Integer Index
	// );
	static Standard_Boolean IsClosed(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F
	);
	// static Standard_Boolean IsClosed(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L
	// );
	static Standard_Boolean IsClosed(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] Handle_Poly_Triangulation T,
		[Const, Ref] TopLoc_Location L
	);
	//static Standard_Real Tolerance([Const, Ref] TopoDS_Edge E);
	static Standard_Boolean SameParameter([Const, Ref] TopoDS_Edge E);
	static Standard_Boolean SameRange([Const, Ref] TopoDS_Edge E);
	static Standard_Boolean Degenerated([Const, Ref] TopoDS_Edge E);
	static void Range(
		[Const, Ref] TopoDS_Edge E,
		Standard_Real First,
		Standard_Real Last
	);
	// static void Range(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	Standard_Real First,
	// 	Standard_Real Last
	// );
	static void Range(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F,
		Standard_Real First,
		Standard_Real Last
	);
	// static void UVPoints(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Ref] gp_Pnt2d PFirst,
	// 	[Ref] gp_Pnt2d PLast
	// );
	// static void UVPoints(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Ref] gp_Pnt2d First,
	// 	[Ref] gp_Pnt2d Last
	// );
	// static void SetUVPoints(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const, Ref] gp_Pnt2d PFirst,
	// 	[Const, Ref] gp_Pnt2d PLast
	// );
	// static void SetUVPoints(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const, Ref] gp_Pnt2d PFirst,
	// 	[Const, Ref] gp_Pnt2d PLast
	// );
	static Standard_Boolean HasContinuity(
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F1,
		[Const, Ref] TopoDS_Face F2
	);
	// [Value] static GeomAbs_Shape Continuity(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F1,
	// 	[Const, Ref] TopoDS_Face F2
	// );
	// static Standard_Boolean HasContinuity(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S1,
	// 	[Const, Ref] Handle_Geom_Surface S2,
	// 	[Const, Ref] TopLoc_Location L1,
	// 	[Const, Ref] TopLoc_Location L2
	// );
	// [Value] static GeomAbs_Shape Continuity(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S1,
	// 	[Const, Ref] Handle_Geom_Surface S2,
	// 	[Const, Ref] TopLoc_Location L1,
	// 	[Const, Ref] TopLoc_Location L2
	// );
	static Standard_Boolean HasContinuity([Const, Ref] TopoDS_Edge E);
	// [Value] static GeomAbs_Shape MaxContinuity([Const, Ref] TopoDS_Edge theEdge);
	// [Value] static gp_Pnt Pnt([Const, Ref] TopoDS_Vertex V);
	// static Standard_Real Tolerance([Const, Ref] TopoDS_Vertex V);
	static Standard_Real Parameter(
		[Const, Ref] TopoDS_Vertex V,
		[Const, Ref] TopoDS_Edge E
	);
	static Standard_Real Parameter(
		[Const, Ref] TopoDS_Vertex V,
		[Const, Ref] TopoDS_Edge E,
		[Const, Ref] TopoDS_Face F
	);
	// static Standard_Real Parameter(
	// 	[Const, Ref] TopoDS_Vertex V,
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L
	// );
	[Value] static gp_Pnt Pnt(
		[Const, Ref] TopoDS_Vertex V
	);
	[Value] static gp_Pnt2d Parameters(
		[Const, Ref] TopoDS_Vertex V,
		[Const, Ref] TopoDS_Face F
	);
	static Standard_Real MaxTolerance(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] TopAbs_ShapeEnum theSubShape
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Polygon3D{
	void Poly_Polygon3D([Const, Ref] TColgp_Array1OfPnt Nodes);
	void Poly_Polygon3D(
		[Const, Ref] TColgp_Array1OfPnt Nodes,
		[Const, Ref] TColStd_Array1OfReal Parameters
	);
	[Value] Handle_Poly_Polygon3D Copy();
	Standard_Real Deflection();
	// void Deflection([Const] Standard_Real D);
	Standard_Integer NbNodes();
	[Const, Ref] TColgp_Array1OfPnt Nodes();
	Standard_Boolean HasParameters();
	[Const, Ref] TColStd_Array1OfReal Parameters();
	[Ref] TColStd_Array1OfReal ChangeParameters();
};

interface GCE2d_MakeSegment {
	void GCE2d_MakeSegment(
		[Const, Ref] gp_Pnt2d P1,
		[Const, Ref] gp_Pnt2d P2
	);
	[Const, Ref] Handle_Geom2d_TrimmedCurve Value();
};

interface Geom_BoundedCurve {
};
Geom_BoundedCurve implements Geom_Curve;

interface Geom2d_Ellipse {
	void Geom2d_Ellipse(
		[Const, Ref] gp_Ax2d MajorAxis,
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius,
		[Const] optional Standard_Boolean Sense = true
	);
};
Geom2d_Ellipse implements Geom2d_Conic;

interface Geom2d_TrimmedCurve {
	void Geom2d_TrimmedCurve(
		[Const, Ref] Handle_Geom2d_Curve C,
		[Const] Standard_Real U1,
		[Const] Standard_Real U2,
		[Const] optional Standard_Boolean Sense = true,
		[Const] optional Standard_Boolean theAdjustPeriodic = true
	);
};
Geom2d_TrimmedCurve implements Geom2d_BoundedCurve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Geom_TrimmedCurve {
	void Geom_TrimmedCurve(
		[Const, Ref] Handle_Geom_Curve C,
		[Const] Standard_Real U1,
		[Const] Standard_Real U2,
		[Const] optional Standard_Boolean Sense = true,
		[Const] optional Standard_Boolean theAdjustPeriodic = true
	);
	void Reverse();
	Standard_Real ReversedParameter([Const] Standard_Real U);
	void SetTrim(
		[Const] Standard_Real U1,
		[Const] Standard_Real U2,
		[Const] optional Standard_Boolean Sense = true,
		[Const] optional Standard_Boolean theAdjust = true
	);
	[Value] Handle_Geom_Curve BasisCurve();
	// [Value] GeomAbs_Shape Continuity();
	Standard_Boolean IsCN([Const] Standard_Integer N);
	Standard_Real FirstParameter();
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	Standard_Real LastParameter();
	[Value] gp_Pnt StartPoint();
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	void DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	void Transform([Const, Ref] gp_Trsf T);
	Standard_Real TransformedParameter(
		[Const] Standard_Real U,
		[Const, Ref] gp_Trsf T
	);
	Standard_Real ParametricTransformation([Const, Ref] gp_Trsf T);
	// [Value] Handle_Geom_Geometry Copy();
};
Geom_TrimmedCurve implements Geom_BoundedCurve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Geom_BezierCurve {
	void Geom_BezierCurve(
		[Const, Ref] TColgp_Array1OfPnt CurvePoles
	);
	void Geom_BezierCurve(
		[Const, Ref] TColgp_Array1OfPnt CurvePoles,
		[Const, Ref] TColStd_Array1OfReal PoleWeights
	);
	void Reverse();
	Standard_Real ReversedParameter([Const] Standard_Real U);

	// [Value] GeomAbs_Shape Continuity();
	Standard_Boolean IsCN([Const] Standard_Integer N);
	Standard_Real FirstParameter();
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	Standard_Real LastParameter();
	[Value] gp_Pnt StartPoint();
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	[Value] gp_Vec DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	void Transform([Const, Ref] gp_Trsf T);
	// [Value] Handle_Geom_Geometry Copy();
};
Geom_BezierCurve implements Geom_Curve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Geom_BSplineCurve {
	void Geom_BSplineCurve(
		[Const, Ref] TColgp_Array1OfPnt Poles,
		[Const, Ref] TColStd_Array1OfReal Weights,
		[Const, Ref] TColStd_Array1OfReal Knots, 
		[Const, Ref] TColStd_Array1OfInteger Multiplicities,
		[Const] Standard_Integer Degree,
		[Const] optional Standard_Boolean Periodic = false,
		[Const] optional Standard_Boolean CheckRational = true
	);
	void Reverse();
	Standard_Real ReversedParameter([Const] Standard_Real U);

	// [Value] GeomAbs_Shape Continuity();
	Standard_Boolean IsCN([Const] Standard_Integer N);
	Standard_Real FirstParameter();
	Standard_Boolean IsClosed();
	Standard_Boolean IsPeriodic();
	Standard_Real Period();
	Standard_Real LastParameter();
	[Value] gp_Pnt StartPoint();
	void D0(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1
	);
	void D2(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2
	);
	void D3(
		[Const] Standard_Real U,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec V1,
		[Ref] gp_Vec V2,
		[Ref] gp_Vec V3
	);
	[Value] gp_Vec DN(
		[Const] Standard_Real U,
		[Const] Standard_Integer N
	);
	void Transform([Const, Ref] gp_Trsf T);
	// [Value] Handle_Geom_Geometry Copy();
};
Geom_BSplineCurve implements Geom_Curve;

interface Standard_Transient {
	[Const] DOMString get_type_name();
	[Const, Ref] Handle_Standard_Type DynamicType();
};

interface Standard_Type {
	[Const] DOMString Name();
};
Standard_Type implements Standard_Transient;

interface Geom_Geometry {
};
Geom_Geometry implements Standard_Transient;

interface Geom_Surface {
};
Geom_Surface implements Geom_Geometry;

interface Geom_ElementarySurface {
	[Value] gp_Pnt Location();
};
Geom_ElementarySurface implements Geom_Surface;

interface Geom_Plane {
};
Geom_Plane implements Geom_ElementarySurface;

interface gp_Ax3 {
	void gp_Ax3();
};

interface gp_Pnt2d {
	void gp_Pnt2d();
	// void gp_Pnt2d([Const, Ref] gp_XY Coord);
	void gp_Pnt2d(
		[Const] Standard_Real Xp,
		[Const] Standard_Real Yp
	);
	Standard_Real X();
	Standard_Real Y();
};

interface gp_Dir2d {
	void gp_Dir2d();
	// void gp_Dir2d([Const, Ref] gp_Vec2d V);
	// void gp_Dir2d([Const, Ref] gp_XY Coord);
	void gp_Dir2d(
		[Const] Standard_Real Xv,
		[Const] Standard_Real Yv
	);
};

interface gp_Ax2d {
	void gp_Ax2d();
	void gp_Ax2d(
		[Const, Ref] gp_Pnt2d P,
		[Const, Ref] gp_Dir2d V
	);
};

interface Geom_CylindricalSurface {
	void Geom_CylindricalSurface(
		[Const, Ref] gp_Ax3 A3,
		[Const] Standard_Real Radius
	);
};

interface Geom2d_Curve {
	Standard_Real Period();
	[Value] gp_Pnt2d Value([Const] Standard_Real U);
};

interface Geom2d_BoundedCurve {
};
Geom2d_BoundedCurve implements Geom2d_Curve;

interface Geom2d_Conic {
};
Geom2d_Conic implements Geom2d_Curve;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom2d_TrimmedCurve{
	void Handle_Geom2d_TrimmedCurve();
	void Handle_Geom2d_TrimmedCurve(Geom2d_TrimmedCurve thePtr);
	boolean IsNull();
	void Nullify();
	Geom2d_TrimmedCurve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom2d_Curve{
	void Handle_Geom2d_Curve();
	void Handle_Geom2d_Curve(Geom2d_Curve thePtr);
	boolean IsNull();
	void Nullify();
	Geom2d_Curve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Standard_Type{
	void Handle_Standard_Type();
	void Handle_Standard_Type(Standard_Type thePtr);
	boolean IsNull();
	void Nullify();
	Standard_Type get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Plane{
	void Handle_Geom_Plane();
	void Handle_Geom_Plane(Geom_Plane thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Plane get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Surface{
	void Handle_Geom_Surface();
	void Handle_Geom_Surface(Geom_Surface thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Surface get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Curve{
	void Handle_Geom_Curve();
	void Handle_Geom_Curve(Geom_Curve thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Curve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_TrimmedCurve{
	void Handle_Geom_TrimmedCurve();
	void Handle_Geom_TrimmedCurve(Geom_TrimmedCurve thePtr);
	boolean IsNull();
	void Nullify();
	Geom_TrimmedCurve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Circle{
	void Handle_Geom_Circle();
	void Handle_Geom_Circle(Geom_Circle thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Circle get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Ellipse{
	void Handle_Geom_Ellipse();
	void Handle_Geom_Ellipse(Geom_Ellipse thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Ellipse get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_Hyperbola{
	void Handle_Geom_Hyperbola();
	void Handle_Geom_Hyperbola(Geom_Hyperbola thePtr);
	boolean IsNull();
	void Nullify();
	Geom_Hyperbola get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_BezierCurve {
	void Handle_Geom_BezierCurve();
	void Handle_Geom_BezierCurve(Geom_BezierCurve thePtr);
	boolean IsNull();
	void Nullify();
	Geom_BezierCurve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Geom_BSplineCurve {
	void Handle_Geom_BSplineCurve();
	void Handle_Geom_BSplineCurve(Geom_BSplineCurve thePtr);
	boolean IsNull();
	void Nullify();
	Geom_BSplineCurve get();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Handle_Poly_Polygon3D{
	void Handle_Poly_Polygon3D();
	void Handle_Poly_Polygon3D(Poly_Polygon3D thePtr);
	boolean IsNull();
	void Nullify();
	Poly_Polygon3D get();
};

interface Handle_ShapeFix_Shell {
	boolean IsNull();
	ShapeFix_Shell get();
};
interface Handle_ShapeFix_Solid {
	boolean IsNull();
	ShapeFix_Solid get();
};

interface Handle_Poly_Triangulation {
	void Handle_Poly_Triangulation();
	void Handle_Poly_Triangulation(Poly_Triangulation thePtr);
	boolean IsNull();
	void Nullify();
	Poly_Triangulation get();
};

interface Handle_Poly_PolygonOnTriangulation {
	void Handle_Poly_PolygonOnTriangulation();
	void Handle_Poly_PolygonOnTriangulation(Poly_PolygonOnTriangulation thePtr);
	boolean IsNull();
	void Nullify();
	Poly_PolygonOnTriangulation get();
};

interface Handle_XSControl_WorkSession {
	void Handle_XSControl_WorkSession();
	void Handle_XSControl_WorkSession(XSControl_WorkSession thePtr);
	boolean IsNull();
	void Nullify();
	XSControl_WorkSession get();
};

interface Handle_Transfer_TransientProcess {
	void Handle_Transfer_TransientProcess();
	void Handle_Transfer_TransientProcess(Transfer_TransientProcess thePtr);
	boolean IsNull();
	void Nullify();
	Transfer_TransientProcess get();
};

interface Handle_Message_ProgressIndicator {
	void Handle_Message_ProgressIndicator();
	void Handle_Message_ProgressIndicator(Message_ProgressIndicator thePtr);
	boolean IsNull();
	void Nullify();
	Message_ProgressIndicator get();
};

interface TColgp_Array1OfPnt {
	void TColgp_Array1OfPnt();
	void TColgp_Array1OfPnt(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] gp_Pnt Value(
		[Const] Standard_Integer theIndex
	);
	void SetValue(
		[Const] Standard_Integer Index,
		[Const, Ref] gp_Pnt Value
	);
};

interface TColgp_Array1OfDir {
	void TColgp_Array1OfDir();
	void TColgp_Array1OfDir(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] gp_Dir Value([Const] Standard_Integer theIndex);
	//void SetValue(
	//	[Const] Standard_Integer Index,
	//	[Const, Ref] gp_Dir Value
	//);
};

interface Poly_Array1OfTriangle {
	void Poly_Array1OfTriangle();
	void Poly_Array1OfTriangle(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	[Const, Ref] Poly_Triangle Value([Const] Standard_Integer theIndex);
	void SetValue(
		[Const] Standard_Integer Index,
		[Const, Ref] Poly_Triangle Value
	);
};

interface TColStd_Array1OfReal {
	void TColStd_Array1OfReal();
	void TColStd_Array1OfReal(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	Standard_Real Value([Const] Standard_Integer theIndex);
	void SetValue(
		[Const] Standard_Integer Index,
		[Const] Standard_Real Value
	);
};

interface TColStd_Array1OfInteger {
	void TColStd_Array1OfInteger();
	void TColStd_Array1OfInteger(
		[Const] Standard_Integer theLower,
		[Const] Standard_Integer theUpper
	);
	Standard_Integer Length();
	Standard_Integer Lower();
	Standard_Integer Upper();
	Standard_Integer Value([Const] Standard_Integer theIndex);
	void SetValue(
		[Const] Standard_Integer Index,
		[Const] Standard_Integer Value
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface XSControl_WorkSession {
	void XSControl_WorkSession();
	void ClearData([Const] Standard_Integer theMode);
	Standard_Boolean SelectNorm([Const] Standard_CString theNormName);
	// void SetController([Const, Ref] Handle_XSControl_Controller theCtl);
	// Standard_CString SelectedNorm([Const] optional Standard_Boolean theRsc = false);
	// Handle_XSControl_Controller NormAdaptor();
	// [Const, Ref] NCollection_DataMap<TCollection_AsciiString, Handle(Standard_Transient)> Context() const
	// void SetAllContext (const NCollection_DataMap<TCollection_AsciiString, [Const, Ref] Handle(Standard_Transient)> theContext);
	void ClearContext();
	// Standard_Boolean PrintTransferStatus(
	// 	[Const] Standard_Integer theNum,
	// 	[Const] Standard_Boolean theWri,
	// 	[Const, Ref] Handle_Message_Messenger theS
	// );
	void InitTransferReader([Const] Standard_Integer theMode);
	// void SetTransferReader([Const, Ref] Handle_XSControl_TransferReader theTR);
	// [Const, Ref] Handle_XSControl_TransferReader TransferReader();
	[Value] Handle_Transfer_TransientProcess MapReader();
	Standard_Boolean SetMapReader([Const, Ref] Handle_Transfer_TransientProcess theTP);
	// [Value] Handle_Standard_Transient Result(
	// 	[Const, Ref] Handle_Standard_Transient,
	// 	[Const] Standard_Integer theMode
	// );
	// Standard_Integer TransferReadOne([Const, Ref] Handle_Standard_Transient theEnts);
	Standard_Integer TransferReadRoots();
	// [Value] Handle_Interface_InterfaceModel NewModel();
	// [Const, Ref] Handle_XSControl_TransferWriter TransferWriter();
	// Standard_Boolean SetMapWriter([Const, Ref] Handle_Transfer_FinderProcess theFP);
	IFSelect_ReturnStatus TransferWriteShape(
		[Const, Ref] TopoDS_Shape theShape,
		[Const] optional Standard_Boolean theCompGraph = true
	);
	// [Value] Interface_CheckIterator TransferWriteCheckList();
	// [Ref] Handle_XSControl_Vars Vars();
	// void SetVars([Const, Ref] Handle_XSControl_Vars theVars);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Transfer_ProcessForTransient {
	void Transfer_ProcessForTransient();
	[Value] Handle_Message_ProgressIndicator GetProgress();
	void SetProgress([Const, Ref] Handle_Message_ProgressIndicator theProgess);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Transfer_TransientProcess {
	void Transfer_TransientProcess([Const] optional Standard_Integer nb = 10000);
	// void SetModel([Const, Ref] Handle_Interface_InterfaceModel model);
	// [Value] Handle_Interface_InterfaceModel Model();
	// void SetGraph([Const, Ref] Handle_Interface_HGraph HG);
	Standard_Boolean HasGraph();
	// [Value] Handle_Interface_HGraph HGraph();
	// [Const, Ref] Interface_Graph Graph();
	// void SetContext(
	// 	[Const] Standard_CString name,
	// 	[Const, Ref] Handle_Standard_Transient ctx
	// );
	// Standard_Boolean GetContext(
	// 	[Const] Standard_CString name,
	// 	[Const, Ref] Handle_Standard_Type type,
	// 	[Ref] Handle_Standard_Transient ctx
	// );
	// NCollection_DataMap<TCollection_AsciiString, [Const, Ref] Handle(Standard_Transient)> Context();
	// void PrintTrace(
	// 	[Const, Ref] Handle_Standard_Transient start,
	// 	[Const, Ref] Handle_Message_Messenger S
	// );
	// Standard_Integer CheckNum([Const, Ref] Handle_Standard_Transient);
	// [Value] Interface_EntityIterator TypedSharings(
	// 	[Const, Ref] Handle_Standard_Transient start,
	// 	[Const, Ref] Handle_Standard_Type type
	// );
	// Standard_Boolean IsDataLoaded([Const, Ref] Handle_Standard_Transient ent);
	// Standard_Boolean IsDataFail([Const, Ref] Handle_Standard_Transient ent);
	// void PrintStats(
	// 	[Const] Standard_Integer mode,
	// 	[Const, Ref] Handle_Message_Messenger S
	// );
	// [Value] Handle_TColStd_HSequenceOTransient RootsForTransfer();
};
Transfer_TransientProcess implements Transfer_ProcessForTransient;

interface Message_ProgressIndicator {
	Standard_Real GetPosition();
	Standard_Real GetValue();
	Standard_Boolean NewScope([Const] Standard_CString name);
	Standard_Boolean NewScope(
		[Const] Standard_Real span,
		[Const] Standard_CString name
	);
	Standard_Boolean EndScope();
	void Reset();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Triangulation {
	void Poly_Triangulation(
		[Const] Standard_Integer nbNodes,
		[Const] Standard_Integer nbTriangles,
		[Const] Standard_Boolean UVNodes
	);
	// void Poly_Triangulation(
	// 	[Const, Ref] TColgp_Array1OfPnt Nodes,
	// 	[Const, Ref] Poly_Array1OfTriangle Triangles
	// );
	// void Poly_Triangulation(
	// 	[Const, Ref] TColgp_Array1OfPnt Nodes,
	// 	[Const, Ref] TColgp_Array1OfPnt2d UVNodes,
	// 	[Const, Ref] Poly_Array1OfTriangle Triangles
	// );
	[Value] Handle_Poly_Triangulation Copy();
	void Poly_Triangulation([Const, Ref] Handle_Poly_Triangulation theTriangulation);
	//Standard_Real Deflection();
	void Deflection([Const] Standard_Real theDeflection);
	void RemoveUVNodes();
	Standard_Integer NbNodes();
	Standard_Integer NbTriangles();
	Standard_Boolean HasUVNodes();
	[Const, Ref] TColgp_Array1OfPnt Nodes();
	[Ref] TColgp_Array1OfPnt ChangeNodes();
	// [Const, Ref] gp_Pnt Node([Const] Standard_Integer theIndex);
	// [Ref] gp_Pnt ChangeNode([Const] Standard_Integer theIndex);
	// [Const, Ref] TColgp_Array1OfPnt2d UVNodes();
	// [Ref] TColgp_Array1OfPnt2d ChangeUVNodes();
	// [Const, Ref] gp_Pnt2d UVNode([Const] Standard_Integer theIndex);
	[Const, Ref] Poly_Array1OfTriangle Triangles();
	[Ref] Poly_Array1OfTriangle ChangeTriangles();
	// [Const, Ref] Poly_Triangle Triangle([Const] Standard_Integer theIndex);
	// [Ref] Poly_Triangle ChangeTriangle([Const] Standard_Integer theIndex);
	// void SetNormals([Const, Ref] Handle_TShort_HArray1OfShortReal theNormals);
	// [Const, Ref] TShort_Array1OfShortReal Normals();
	// [Ref] TShort_Array1OfShortReal ChangeNormals();
	Standard_Boolean HasNormals();
	[Value] gp_Dir Normal([Const] Standard_Integer theIndex);
	void SetNormal(
		[Const] Standard_Integer theIndex,
		[Const, Ref] gp_Dir theNormal
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Triangle {
	void Poly_Triangle();
	void Poly_Triangle(
		[Const] Standard_Integer N1,
		[Const] Standard_Integer N2,
		[Const] Standard_Integer N3
	);
	void Set(
		[Const] Standard_Integer N1,
		[Const] Standard_Integer N2,
		[Const] Standard_Integer N3
	);
	void Set(
		[Const] Standard_Integer Index,
		[Const] Standard_Integer Node
	);
	// void Get(
	// 	[Ref] Standard_Integer N1,
	// 	[Ref] Standard_Integer N2,
	// 	[Ref] Standard_Integer N3
	// );
	Standard_Integer Value([Const] Standard_Integer Index);
	Standard_Integer ChangeValue([Const] Standard_Integer Index);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_Connect {
	void Poly_Connect();
	void Poly_Connect([Const, Ref] Handle_Poly_Triangulation theTriangulation);
	void Load([Const, Ref] Handle_Poly_Triangulation theTriangulation);
	[Const, Ref] Handle_Poly_Triangulation Triangulation();
	Standard_Integer Triangle([Const] Standard_Integer N);
	void Triangles(
		[Const] Standard_Integer T,
		Standard_Integer t1,
		Standard_Integer t2,
		Standard_Integer t3
	);
	void Nodes(
		[Const] Standard_Integer T,
		Standard_Integer t1,
		Standard_Integer t2,
		Standard_Integer t3
	);
	void Initialize([Const] Standard_Integer N);
	Standard_Boolean More();
	void Next();
	Standard_Integer Value();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface StdPrs_ToolTriangulatedShape {
	void StdPrs_ToolTriangulatedShape();
	static Standard_Boolean IsTriangulated([Const, Ref] TopoDS_Shape theShape);
	static Standard_Boolean IsClosed([Const, Ref] TopoDS_Shape theShape);
	static void ComputeNormals(
		[Const, Ref] TopoDS_Face theFace,
		[Const, Ref] Handle_Poly_Triangulation theTris
	);
	static void ComputeNormals(
		[Const, Ref] TopoDS_Face theFace,
		[Const, Ref] Handle_Poly_Triangulation theTris,
		[Ref] Poly_Connect thePolyConnect
	);
	static void Normal(
		[Const, Ref] TopoDS_Face theFace,
		[Ref] Poly_Connect thePolyConnect,
		[Ref] TColgp_Array1OfDir theNormals
	);
	// static Standard_Boolean IsTessellated(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer theDrawer
	// );
	// static Standard_Boolean Tessellate(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer theDrawer
	// );
	// static void ClearOnOwnDeflectionChange(
	// 	[Const, Ref] TopoDS_Shape theShape,
	// 	[Const, Ref] Handle_Prs3d_Drawer,
	// 	[Const] Standard_Boolean theToResetCoeff
	// );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_Sewing {
	void BRepBuilderAPI_Sewing(
		[Const] optional Standard_Real tolerance = 1e-6,
		[Const] optional Standard_Boolean option1 = true,
		[Const] optional Standard_Boolean option2 = true,
		[Const] optional Standard_Boolean option3 = true,
		[Const] optional Standard_Boolean option4 = false
	);
	void Init(
		[Const] optional Standard_Real tolerance = 1e-6,
		[Const] optional Standard_Boolean option1 = true,
		[Const] optional Standard_Boolean option2 = true,
		[Const] optional Standard_Boolean option3 = true,
		[Const] optional Standard_Boolean option4 = false
	);
	void Load([Const, Ref] TopoDS_Shape shape);
	void Add([Const, Ref] TopoDS_Shape shape);
	void Perform([Const, Ref] optional Handle_Message_ProgressIndicator thePI);
	[Const, Ref] TopoDS_Shape SewedShape();
	// void SetContext([Const, Ref] Handle_BRepTools_ReShape theContext);
	// [Const, Ref] Handle_BRepTools_ReShape GetContext();
	Standard_Integer NbFreeEdges();
	[Const, Ref] TopoDS_Edge FreeEdge([Const] Standard_Integer index);
	Standard_Integer NbMultipleEdges();
	[Const, Ref] TopoDS_Edge MultipleEdge([Const] Standard_Integer index);
	Standard_Integer NbContigousEdges();
	[Const, Ref] TopoDS_Edge ContigousEdge([Const] Standard_Integer index);
	// [Const, Ref] TopTools_ListOfShape ContigousEdgeCouple([Const] Standard_Integer index);
	Standard_Boolean IsSectionBound([Const, Ref] TopoDS_Edge section);
	[Const, Ref] TopoDS_Edge SectionToBoundary([Const, Ref] TopoDS_Edge section);
	Standard_Integer NbDegeneratedShapes();
	[Const, Ref] TopoDS_Shape DegeneratedShape([Const] Standard_Integer index);
	Standard_Boolean IsDegenerated([Const, Ref] TopoDS_Shape shape);
	Standard_Boolean IsModified([Const, Ref] TopoDS_Shape shape);
	[Const, Ref] TopoDS_Shape Modified([Const, Ref] TopoDS_Shape shape);
	Standard_Boolean IsModifiedSubShape([Const, Ref] TopoDS_Shape shape);
	[Value] TopoDS_Shape ModifiedSubShape([Const, Ref] TopoDS_Shape shape);
	void Dump();
	Standard_Integer NbDeletedFaces();
	[Const, Ref] TopoDS_Face DeletedFace([Const] Standard_Integer index);
	[Value] TopoDS_Face WhichFace(
		[Const, Ref] TopoDS_Edge theEdg,
		[Const] optional Standard_Integer index = 1
	);
	Standard_Boolean SameParameterMode();
	void SetSameParameterMode([Const] Standard_Boolean SameParameterMode);
	Standard_Real Tolerance();
	void SetTolerance([Const] Standard_Real theToler);
	Standard_Real MinTolerance();
	void SetMinTolerance([Const] Standard_Real theMinToler);
	Standard_Real MaxTolerance();
	void SetMaxTolerance([Const] Standard_Real theMaxToler);
	Standard_Boolean FaceMode();
	void SetFaceMode([Const] Standard_Boolean theFaceMode);
	Standard_Boolean FloatingEdgesMode();
	void SetFloatingEdgesMode([Const] Standard_Boolean theFloatingEdgesMode);
	Standard_Boolean LocalTolerancesMode();
	void SetLocalTolerancesMode([Const] Standard_Boolean theLocalTolerancesMode);
	void SetNonManifoldMode([Const] Standard_Boolean theNonManifoldMode);
	Standard_Boolean NonManifoldMode();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface TopoDS_Builder {
	void MakeWire([Ref] TopoDS_Wire W);
	// void MakeShell([Ref] TopoDS_Shell S);
	// void MakeSolid([Ref] TopoDS_Solid S);
	// void MakeCompSolid([Ref] TopoDS_CompSolid C);
	void MakeCompound([Ref] TopoDS_Compound C);
	void Add(
		[Ref] TopoDS_Shape S,
		[Const, Ref] TopoDS_Shape C
	);
	void Remove(
		[Ref] TopoDS_Shape S,
		[Const, Ref] TopoDS_Shape C
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRep_Builder {
	void BRep_Builder();
	void MakeFace([Ref] TopoDS_Face F);
	// void MakeFace(
	// 	[Ref] TopoDS_Face F,
	// 	[Const, Ref] Handle_GeomSurface S,
	// 	[Const] Standard_Real Tol
	// );
	// void MakeFace(
	// 	[Ref] TopoDS_Face F,
	// 	[Const, Ref] Handle_GeomSurface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	void MakeFace(
		[Ref] TopoDS_Face F,
		[Const, Ref] Handle_Poly_Triangulation T
	);
	// void UpdateFace(
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const, Ref] Handle_GeomSurface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	void UpdateFace(
		[Const, Ref] TopoDS_Face F,
		[Const, Ref] Handle_Poly_Triangulation T
	);
	// void UpdateFace(
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const] Standard_Real Tol
	// );
	void NaturalRestriction(
		[Const, Ref] TopoDS_Face F,
		[Const] Standard_Boolean N
	);
	void MakeEdge([Ref] TopoDS_Edge E);
	// void MakeEdge(
	// 	[Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Curve C,
	// 	[Const] Standard_Real Tol
	// );
	// void MakeEdge(
	// 	[Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Curve C,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	// void MakeEdge(
	// 	[Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon3D P
	// );
	// void MakeEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N,
	// 	[Const, Ref] Handle_Poly_Triangulation T
	// );
	// void MakeEdge(
	// 	[Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N,
	// 	[Const, Ref] Handle_Poly_Triangulation T,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// void UpdateEdge(
	// 	[Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Curve C,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Ref] Handle_Geom_Curve C,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2D_Curve C,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2D_Curve C,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const] Standard_Real Tol Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_Curve C1,
	// 	[Const, Ref] Handle_Geom2D_Curve C2,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_Curve C,
	// 	[Const, Ref] Handle_Geom2d_Sface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle-Geom2d_Curve C,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// 	[Const, Ref] gp_Pnt2d Pf,
	// 	[Const, Ref] gp_Pnt2d Pl
	// );
	// void UpdateEge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_Curve,
	// 	[Const, Ref] Handle_Geom2d_Curve C2,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom2d_curve C1,
	// 	[Const, Ref] Handle_Geom2d_Curve C2,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol,
	// 	[Const, Ref] gp_Pnt2d P,
	// 	[Const, Ref] gp_Pnt2d Pl
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon3D
	// );
	// void UpdateEdge(
	// 	[Const; Ref] TopoDS_Edge E,
	// 	[Const, Ref] Poly_Polygon3D P,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N,
	// 	[Const, Ref] Handle_Poly_Triangulation T
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N,
	// 	[Const, Ref] Handle_Poly_Tangulation T,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N1,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N2,
	// 	[Const, Ref] Handle_Poly_Triangulation T
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N1,
	// 	[Const, Ref] Handle_Poly_PolygonOnTriangulation N2,
	// 	[Const, Ref] Handle_Poly_Triangulation T,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon2D P,
	// 	[Const, Ref] TopoDS_Face S
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon2D P,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location T
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon2D P1,
	// 	[Const, Ref] Handle_Poly_Polygon2D P2,
	// 	[Const, Ref] TopoDS_Face S
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Poly_Polygon2D P1,
	// 	[Const, Ref] Handle_Poly_Polygon2D P2,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L
	// );
	// void UpdateEdge(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const] Standard_Real Tol
	// );
	// void Continuity(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F1,
	// 	[Const, Ref] TopoDS_Face F2,
	// 	[Const] GeomAbs_Shape C
	// );
	// void Continuity(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Suface S1,
	// 	[Const, Ref] Handle_Geom_Surface S2,
	// 	[Const, Ref] TopLoc_Location L1,
	// 	[Const, Ref] TopLoc_Location L2,
	// 	[Const] GeomAbs_Shape C
	// );
	void SameParameter(
		[Const, Ref] TopoDS_Edge E,
		[Const] Standard_Boolean S
	);
	void SameRange(
		[Const, Ref] TopoDS_Edge E,
		[Const] Standard_Boolean S
	);
	void Degenerated(
		[Const, Ref] TopoDS_Edge E,
		[Const] Standard_Boolean D
	);
	void Range(
		[Const, Ref] TopoDS_Edge E,
		[Const] Standard_Real First,
		[Const] Standard_Real Last,
		[Const] optional Standard_Boolean Only3d = false
	);
	// void Range(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last
	// );
	// void Range(
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_Face F,
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last
	// );
	void Transfert(
		[Const, Ref] TopoDS_Edge Ein,
		[Const, Ref] TopoDS_Edge Eout
	);
	void MakeVertex([Ref] TopoDS_Vertex V);
	void MakeVertex(
		[Ref] TopoDS_Vertex V,
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real Tol
	);
	void UpdateVertex(
		[Ref] TopoDS_Vertex V,
		[Const, Ref] gp_Pnt P,
		[Const] Standard_Real Tol
	);
	// void UpdateVertex(
	// 	[Const, Ref] TopoDS_Vertex V,
	// 	[Const] Standard_Real P,
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateVertex(
	// 	[Const, Ref] TopoDS_Vertex V,
	// 	[Const] Standard_Real P,
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] TopoDS_F F,
	// 	[Const] Standard_Real Tol
	// );
	// void UpdateVertex(
	// 	[Const, Ref] TopoDS_Vertex V,
	// 	[Const] Standard_Real P,
	// 	[Const, Ref] TopoDS_Edge E,
	// 	[Const, Ref] Handle_Geom_Surface S,
	// 	[Const, Ref] TopLoc_Location L,
	// 	[Const] Standard_Real Tol
	// );
	void UpdateVertex(
		[Const, Ref] TopoDS_Vertex Ve,
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Const, Ref] TopoDS_Face F,
		[Const] Standard_Real Tol
	);
	void UpdateVertex(
		[Const, Ref] TopoDS_Vertex V,
		[Const] Standard_Real Tol
	);
	void Transfert(
		[Const, Ref] TopoDS_Edge Ein,
		[Const, Ref] TopoDS_Edge Eout,
		[Const, Ref] TopoDS_Vertex Vin,
		[Const, Ref] TopoDS_Vertex Vout
	);
};
BRep_Builder implements TopoDS_Builder;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepAdaptor_Surface {
	void BRepAdaptor_Surface();
	void BRepAdaptor_Surface(
		[Const, Ref] TopoDS_Face F,
		[Const] optional Standard_Boolean R = true
	);
	void Initialize(
		[Const, Ref] TopoDS_Face F,
		[Const] optional Standard_Boolean R = true
	);
	// [Ref] GeomAdaptor_Surface Surface();
	// [Ref] GeomAdaptor_Surface ChangeSurface();
	[Const, Ref] gp_Trsf Trsf();
	[Const, Ref] TopoDS_Face Face();
	Standard_Real Tolerance();
	Standard_Real FirstUParameter();
	Standard_Real LastUParameter();
	Standard_Real FirstVParameter();
	Standard_Real LastVParameter();
	// [Value] GeomAbs_Shape UContinuity();
	// [Value] GeomAbs_Shape VContinuity();
	// Standard_Integer NbUIntervals([Const] GeomAbs_Shape S);
	// Standard_Integer NbVIntervals([Const] GeomAbs_Shape S);
	// void UIntervals(
	// 	[Ref] TColStd_Array1OfReal T,
	// 	[Const] GeomAbs_Shape S
	// );
	// void VIntervals(
	// 	[Ref] TColStd_Array1OfReal T,
	// 	[Const] GeomAbs_Shape S
	// );
	// [Value] Handle_Adaptor3d_HSurface UTrim(
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last,
	// 	[Const] Standard_Real Tol
	// );
	// [Value] Handle_Adaptor3d_HSurface VTrim(
	// 	[Const] Standard_Real First,
	// 	[Const] Standard_Real Last,
	// 	[Const] Standard_Real Tol
	// );
	Standard_Boolean IsUClosed();
	Standard_Boolean IsVClosed();
	Standard_Boolean IsUPeriodic();
	Standard_Real UPeriod();
	Standard_Boolean IsVPeriodic();
	Standard_Real VPeriod();
	[Value] gp_Pnt Value(
		[Const] Standard_Real U,
		[Const] Standard_Real V
	);
	void D0(
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Ref] gp_Pnt P
	);
	void D1(
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec D1U,
		[Ref] gp_Vec D1V
	);
	void D2(
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec D1U,
		[Ref] gp_Vec D1V,
		[Ref] gp_Vec D2U,
		[Ref] gp_Vec D2V,
		[Ref] gp_Vec D2UV
	);
	void D3(
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Ref] gp_Pnt P,
		[Ref] gp_Vec D1U,
		[Ref] gp_Vec D1V,
		[Ref] gp_Vec D2U,
		[Ref] gp_Vec D2V,
		[Ref] gp_Vec D2UV,
		[Ref] gp_Vec D3U,
		[Ref] gp_Vec D3V,
		[Ref] gp_Vec D3UUV,
		[Ref] gp_Vec D3UVV
	);
	[Value] gp_Vec DN(
		[Const] Standard_Real U,
		[Const] Standard_Real V,
		[Const] Standard_Integer Nu,
		[Const] Standard_Integer Nv
	);
	Standard_Real UResolution([Const] Standard_Real R3d);
	Standard_Real VResolution([Const] Standard_Real R3d);
	GeomAbs_SurfaceType GetType();
	[Value] gp_Pln Plane();
	// [Value] gp_Cylinder Cylinder();
	// [Value] gp_Cone Cone();
	// [Value] gp_Sphere Sphere();
	// [Value] gp_Torus Torus();
	Standard_Integer UDegree();
	Standard_Integer NbUPoles();
	Standard_Integer VDegree();
	Standard_Integer NbVPoles();
	Standard_Integer NbUKnots();
	Standard_Integer NbVKnots();
	Standard_Boolean IsURational();
	Standard_Boolean IsVRational();
	// [Value] Handle_Geom_BezierSurface Bezier();
	// [Value] Handle_Geom_BSplineSurface BSpline();
	[Value] gp_Ax1 AxeOfRevolution();
	[Value] gp_Dir Direction();
	// [Value] Handle_Adaptor3d_HCurve BasisCurve();
	// [Value] Handle_Adaptor3d_HSurface BasisSurface();
	Standard_Real OffsetValue();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface StlAPI_Reader {
	void StlAPI_Reader();
	Standard_Boolean Read(
		[Ref] TopoDS_Shape theShape,
		[Const] Standard_CString theFileName
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum TopAbs_Orientation {
	"TopAbs_FORWARD",
	"TopAbs_REVERSED",
	"TopAbs_INTERNAL",
	"TopAbs_EXTERNAL"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum TopAbs_ShapeEnum {
	"TopAbs_COMPOUND",
	"TopAbs_COMPSOLID",
	"TopAbs_SOLID",
	"TopAbs_SHELL",
	"TopAbs_FACE",
	"TopAbs_WIRE",
	"TopAbs_EDGE",
	"TopAbs_VERTEX",
	"TopAbs_SHAPE"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_SurfaceType
{
	"GeomAbs_Plane",
	"GeomAbs_Cylinder",
	"GeomAbs_Cone",
	"GeomAbs_Sphere",
	"GeomAbs_Torus",
	"GeomAbs_BezierSurface",
	"GeomAbs_BSplineSurface",
	"GeomAbs_SurfaceOfRevolution",
	"GeomAbs_SurfaceOfExtrusion",
	"GeomAbs_OffsetSurface",
	"GeomAbs_OtherSurface"
};

interface BRepAlgoAPI_Fuse {
	void BRepAlgoAPI_Fuse(
		[Const, Ref] TopoDS_Shape S1,
		[Const, Ref] TopoDS_Shape S2
	);
	void SetFuzzyValue(
		[Const] Standard_Real theFuzz
	);
	void Build();
};
BRepAlgoAPI_Fuse implements BRepAlgoAPI_BooleanOperation;

interface BRepAlgoAPI_Cut{
	void BRepAlgoAPI_Cut(
		[Const, Ref] TopoDS_Shape S1,
		[Const, Ref] TopoDS_Shape S2
	);
	void SetFuzzyValue(
		[Const] Standard_Real theFuzz
	);
	void Build();
};
BRepAlgoAPI_Cut implements BRepAlgoAPI_BooleanOperation;

interface BRepAlgoAPI_Common {
	void BRepAlgoAPI_Common(
		[Const, Ref] TopoDS_Shape S1,
		[Const, Ref] TopoDS_Shape S2
	);
	void SetFuzzyValue(
		[Const] Standard_Real theFuzz
	);
	void Build();
};
BRepAlgoAPI_Common implements BRepAlgoAPI_BooleanOperation;

interface BRepAlgoAPI_BooleanOperation{
};
BRepAlgoAPI_BooleanOperation implements BRepBuilderAPI_MakeShape;

interface ShapeUpgrade_RemoveInternalWires {
	void ShapeUpgrade_RemoveInternalWires(
		[Const, Ref] TopoDS_Shape theShape
	);
	Standard_Real MinArea();
	Standard_Boolean RemoveFaceMode();
	Standard_Boolean Perform();
	[Value] TopoDS_Shape GetResult();
};
ShapeUpgrade_RemoveInternalWires implements ShapeUpgrade_Tool;
interface ShapeUpgrade_Tool{};

interface gp_Lin{
    void gp_Lin();
    void gp_Lin([Const, Ref] gp_Ax1 A1);
};

interface gp_Circ {
	void gp_Circ();
	void gp_Circ(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real Radius
	);
	Standard_Real Radius();
	Standard_Real Length();
	Standard_Real Area();
};

interface gp_Elips{
	void gp_Elips();
	void gp_Elips(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	Standard_Real Eccentricity();
	Standard_Real Focal();
	Standard_Real Area();
	Standard_Real MajorRadius();
	Standard_Real MinorRadius();
};
interface gp_Hypr{
	void gp_Hypr();
	void gp_Hypr(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real MajorRadius,
		[Const] Standard_Real MinorRadius
	);
	Standard_Real Eccentricity();
	Standard_Real Focal();
	Standard_Real MajorRadius();
	Standard_Real MinorRadius();
};
interface gp_Parab{
	void gp_Parab();
	void gp_Parab(
		[Const, Ref] gp_Ax2 A2,
		[Const] Standard_Real Focal
	);
	Standard_Real Focal();
};

interface BRepBuilderAPI_MakeEdge{
	void BRepBuilderAPI_MakeEdge([Const, Ref] Handle_Geom_Curve C);
	void BRepBuilderAPI_MakeEdge(
		[Const, Ref] Handle_Geom2d_Curve L,
		[Const, Ref] Handle_Geom_Surface S
	);
	[Const, Ref] TopoDS_Edge Edge();
};

interface BRepBuilderAPI_MakeWire{
	void BRepBuilderAPI_MakeWire();
	void BRepBuilderAPI_MakeWire(
		[Const, Ref] TopoDS_Edge E
	);
	void BRepBuilderAPI_MakeWire(
		[Const, Ref] TopoDS_Edge E1,
		[Const, Ref] TopoDS_Edge E2
	);
	void BRepBuilderAPI_MakeWire(
		[Const, Ref] TopoDS_Edge E1,
		[Const, Ref] TopoDS_Edge E2,
		[Const, Ref] TopoDS_Edge E3
	);
	void Add ([Const, Ref] TopoDS_Wire W);
	[Const, Ref] TopoDS_Wire Wire();
};
BRepBuilderAPI_MakeWire implements BRepBuilderAPI_MakeShape;

interface BRepLib {
	Standard_Boolean BuildCurve3d(
		[Const, Ref] TopoDS_Edge E,
		[Const] optional Standard_Real Tolerance = 1.0e-5,
		[Const] optional GeomAbs_Shape Continuity = "GeomAbs_C1",
		[Const] optional Standard_Integer MaxDegree = 14,
		[Const] optional Standard_Integer MaxSegment = 0
	);
	static Standard_Boolean BuildCurves3d([Const, Ref] TopoDS_Shape S);
};

interface BRepOffsetAPI_ThruSections {
	void BRepOffsetAPI_ThruSections(
		[Const] optional Standard_Boolean isSolid = true,
		[Const] optional Standard_Boolean ruled = false,
		[Const] optional Standard_Real pres3d = 1.0e-6
	);
	void AddWire([Const, Ref] TopoDS_Wire wire);
	void CheckCompatibility([Const] optional Standard_Boolean check = true);
};
BRepOffsetAPI_ThruSections implements BRepBuilderAPI_MakeShape;

interface BRepOffsetAPI_MakePipe {
	void BRepOffsetAPI_MakePipe(
		[Const, Ref] TopoDS_Wire Spine,
		[Const, Ref] TopoDS_Shape Profile
	);
	void Build();
	[Value] TopoDS_Shape Generated(
		[Const, Ref] TopoDS_Shape SSpine,
		[Const, Ref] TopoDS_Shape SProfile
	);
	[Value] TopoDS_Shape FirstShape();
	[Value] TopoDS_Shape LastShape();
	[Const] Standard_Real ErrorOnSurface();
};
BRepOffsetAPI_MakePipe implements BRepBuilderAPI_MakeShape;

interface BRepOffsetAPI_MakePipeShell {
	void BRepOffsetAPI_MakePipeShell(
		[Const, Ref] TopoDS_Wire Spine
	);
	//void SetMode([Const] optional Standard_Boolean IsFrenet = false);
	void SetMode(
		[Const, Ref] TopoDS_Wire AuxiliarySpine, 
		[Const] Standard_Boolean CurvilinearEquivalence, 
		[Const] optional BRepFill_TypeOfContact KeepContact = "BRepFill_NoContact"
	);
	void Add(
		[Const, Ref] TopoDS_Shape Profile, 
		[Const] optional Standard_Boolean WithContact = false, 
		[Const] optional Standard_Boolean WithCorrection = false
	);
	//void Add(
	//	[Const, Ref] TopoDS_Shape Profile, 
	//	[Const, Ref] TopoDS_Vertex Location, 
	//	[Const] optional Standard_Boolean WithContact = false, 
	//	[Const] optional Standard_Boolean WithCorrection = false
	//);
	void Build();
	[Const] Standard_Boolean MakeSolid();
	[Value] TopTools_ListOfShape Generated(
		[Const, Ref] TopoDS_Shape S
	);
	[Value] TopoDS_Shape FirstShape();
	[Value] TopoDS_Shape LastShape();
	[Value] TopoDS_Shape Shape();
	[Const] Standard_Real ErrorOnSurface();
	[Const] BRepBuilderAPI_PipeError GetStatus();
	[Const] Standard_Boolean IsReady();
};
BRepOffsetAPI_MakePipe implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakeVertex {
	void BRepBuilderAPI_MakeVertex([Const, Ref] gp_Pnt P);
	[Const, Ref] TopoDS_Vertex Vertex();
};
BRepBuilderAPI_MakeVertex implements BRepBuilderAPI_MakeShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakePolygon {
	void BRepBuilderAPI_MakePolygon();
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2
	// );
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const, Ref] gp_Pnt P3,
	// 	[Const] Standard_Boolean Close
	// );
	// void BRepBuilderAPI_MakePolygon(
	// 	[Const, Ref] gp_Pnt P1,
	// 	[Const, Ref] gp_Pnt P2,
	// 	[Const, Ref] gp_Pnt P3,
	// 	[Const, Ref] gp_Pnt P4,
	// 	[Const] Standard_Boolean Close
	// );
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2
	);
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2,
		[Const, Ref] TopoDS_Vertex V3,
		[Const] Standard_Boolean Close
	);
	void BRepBuilderAPI_MakePolygon(
		[Const, Ref] TopoDS_Vertex V1,
		[Const, Ref] TopoDS_Vertex V2,
		[Const, Ref] TopoDS_Vertex V3,
		[Const, Ref] TopoDS_Vertex V4,
		[Const] Standard_Boolean Close
	);
	// void Add([Const, Ref] gp_Pnt P);
	void Add([Const, Ref] TopoDS_Vertex V);
	Standard_Boolean Added();
	void Close();
	[Const, Ref] TopoDS_Vertex FirstVertex();
	[Const, Ref] TopoDS_Vertex LastVertex();
	Standard_Boolean IsDone();
	[Const, Ref] TopoDS_Edge Edge();
	[Const, Ref] TopoDS_Wire Wire();
};
BRepBuilderAPI_MakePolygon implements BRepBuilderAPI_MakeShape;

interface XSControl_Reader {
	void XSControl_Reader();
	void XSControl_Reader([Const] Standard_CString norm);
	void XSControl_Reader(
		[Const, Ref] Handle_XSControl_WorkSession WS,
		Standard_Boolean scratch
	);
	Standard_Boolean SetNorm([Const] Standard_CString norm);
	void SetWS(
		[Const, Ref] Handle_XSControl_WorkSession WS,
		[Const] optional Standard_Boolean scratch = true
	);
	[Value] Handle_XSControl_WorkSession WS();
	IFSelect_ReturnStatus ReadFile ([Const] DOMString filename);
	// [Value] Handle_Interface_InterfaceModel Model();
	// [Value] Handle_TColStd_HSequenceOfTransient GiveList(
	// 	[Const] optional Standard_CString first = "",
	// 	[Const] optional Standard_CString second = ""
	// );
	// [Value] Handle_TColStd_HSequenceOfTransient GiveList(
	// 	[Const] Standard_CString first,
	// 	[Const, Ref] Handle_Standard_Transient ent
	// );
	Standard_Integer NbRootsForTransfer();
	// Handle_Standard_Transient RootForTransfer([Const] optional Standard_Integer num = 1);
	Standard_Boolean TransferOneRoot([Const] optional Standard_Integer num = 1);
	Standard_Boolean TransferOne([Const] Standard_Integer num);
	// Standard_Boolean TransferEntity([Const, Ref] Handle_Standard_Transient start);
	// Standard_Integer TransferList([Const, Ref] Handle_TColStd_HSequenceOfTransient list);
	Standard_Integer TransferRoots();
	void ClearShapes();
	Standard_Integer NbShapes();
	[Value] TopoDS_Shape Shape([Const] optional Standard_Integer num = 1);
	[Value] TopoDS_Shape OneShape();
	// void PrintCheckLoad(
	// 	[Const] Standard_Boolean failsonly,
	// 	[Const] IFSelect_PrintCount mode
	// );
	// void PrintCheckTransfer(
	// 	[Const] Standard_Boolean failsonly,
	// 	[Const] IFSelect_PrintCount mode
	// );
	void PrintStatsTransfer(
		[Const] Standard_Integer what,
		[Const] optional Standard_Integer mode = 0
	);
};

interface STEPControl_Reader {
	void STEPControl_Reader();
};
STEPControl_Reader implements XSControl_Reader;

interface IGESControl_Reader {
	void IGESControl_Reader();
};
IGESControl_Reader implements XSControl_Reader;

interface TopTools_ListOfShape {
	void TopTools_ListOfShape();
	[Ref] TopoDS_Shape Append([Const, Ref] TopoDS_Shape theItem);
	[Value] TopoDS_Shape First();
	[Value] TopoDS_Shape Last();
};

interface BRepOffsetAPI_MakeOffset {
	void BRepOffsetAPI_MakeOffset();
	void BRepOffsetAPI_MakeOffset(
		[Const, Ref] TopoDS_Wire Spine, 
		[Const] optional GeomAbs_JoinType Join="GeomAbs_Arc",
		[Const] optional Standard_Boolean IsOpenResult=false
	);
	void AddWire(
		[Const, Ref] TopoDS_Wire Spine
	);
	void Perform(
		[Const] Standard_Real Offset, 
		[Const] optional Standard_Real Alt = 0.0
	);
	[Value] TopoDS_Shape Shape();
};
BRepOffsetAPI_MakeOffset implements BRepBuilderAPI_MakeShape;

interface BRepOffsetAPI_MakeOffsetShape {
	void BRepOffsetAPI_MakeOffsetShape();
	void PerformBySimple(
		[Const, Ref] TopoDS_Shape theS, 
		[Const] Standard_Real theOffsetValue
	);
	void PerformByJoin(
		[Const, Ref] TopoDS_Shape S, 
		[Const] Standard_Real Offset, 
		[Const] Standard_Real Tol, 
		[Const] optional BRepOffset_Mode Mode="BRepOffset_Skin",
		[Const] optional Standard_Boolean Intersection=false,
		[Const] optional Standard_Boolean SelfInter=false,
		[Const] optional GeomAbs_JoinType Join="GeomAbs_Arc",
		[Const] optional Standard_Boolean RemoveIntEdges=false
	);
	[Value] TopoDS_Shape Shape();
};
BRepOffsetAPI_MakeOffsetShape implements BRepBuilderAPI_MakeShape;

interface BRepOffsetAPI_MakeThickSolid {
	void BRepOffsetAPI_MakeThickSolid();
	void MakeThickSolidByJoin(
		[Const, Ref] TopoDS_Shape S,
		[Const, Ref] TopTools_ListOfShape ClosingFaces,
		[Const] Standard_Real Offset,
		[Const] Standard_Real Tol
	);
};
BRepOffsetAPI_MakeThickSolid implements BRepOffsetAPI_MakeOffsetShape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface ShapeFix_Face {
	void ShapeFix_Face();
	void ShapeFix_Face([Const, Ref] TopoDS_Face face);
	void ClearModes();
	void Init([Const, Ref] TopoDS_Face face);
	// void Init(
	// 	[Const, Ref] Handle_Geom_Surface surf,
	// 	[Const] Standard_Real preci,
	// 	[Const] optional Standard_Boolean fwd = true
	// );
	// void SetMsgRegistrator([Const, Ref] Handle_ShapeExtend_BasicMsgRegistrator msgreg);
	void SetPrecision([Const] Standard_Real preci);
	void SetMinTolerance([Const] Standard_Real mintol);
	void SetMaxTolerance([Const] Standard_Real maxtol);
	Standard_Integer FixWireMode();
	Standard_Integer FixOrientationMode();
	Standard_Integer FixAddNaturalBoundMode();
	Standard_Integer FixMissingSeamMode();
	Standard_Integer FixSmallAreaWireMode();
	Standard_Integer RemoveSmallAreaFaceMode();
	Standard_Integer FixIntersectingWiresMode();
	Standard_Integer FixLoopWiresMode();
	Standard_Integer FixSplitFaceMode();
	Standard_Integer AutoCorrectPrecisionMode();
	Standard_Integer FixPeriodicDegeneratedMode();
	[Value] TopoDS_Face Face();
	[Value] TopoDS_Shape Result();
	void Add([Const, Ref] TopoDS_Wire wire);
	Standard_Boolean Perform();
	Standard_Boolean FixOrientation();
	// Standard_Boolean FixOrientation([Ref] TopTools_DataMapOfShapeListOfShape MapWires);
	Standard_Boolean FixAddNaturalBound();
	Standard_Boolean FixMissingSeam();
	Standard_Boolean FixSmallAreaWire([Const] Standard_Boolean theIsRemoveSmallFace);
	// Standard_Boolean FixLoopWire([Ref] TopTools_SequenceOfShapes aResWires);
	Standard_Boolean FixIntersectingWires();
	Standard_Boolean FixWiresTwoCoincEdges();
	// Standard_Boolean FixSplitFace([Const, Ref] TopTools_DataMapOfShapeListOfShape MapWires);
	Standard_Boolean FixPeriodicDegenerated();
	// Standard_Boolean Status([Const] ShapeExtend_Status status);
	// [Value] Handle_ShapeFix_Wire FixWireTool();
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface ShapeFix_Shape {
	void ShapeFix_Shape();
	void ShapeFix_Shape([Const, Ref] TopoDS_Shape shape);
	void Init([Const, Ref] TopoDS_Shape shape);
	Standard_Boolean Perform([Const, Ref] optional Handle_Message_ProgressIndicator theProgress);
	[Value] TopoDS_Shape Shape();
	[Value] Handle_ShapeFix_Solid FixSolidTool();
	[Value] Handle_ShapeFix_Shell FixShellTool();
	// [Value] Handle_ShapeFix_Face FixFaceTool();
	// [Value] Handle_ShapeFix_Wire FixWireTool();
	// [Value] Handle_ShapeFix_Edge FixEdgeTool();
	Standard_Boolean Status([Const] ShapeExtend_Status status);
	// void SetMsgRegistrator([Const, Ref] Handle_ShapeExtend_BasicMsgRegistrator msgreg);
	void SetPrecision([Const] Standard_Real preci);
	void SetMinTolerance([Const] Standard_Real mintol);
	void SetMaxTolerance([Const] Standard_Real maxtol);
	Standard_Integer FixSolidMode();
	Standard_Integer FixFreeShellMode();
	Standard_Integer FixFreeFaceMode();
	Standard_Integer FixFreeWireMode();
	Standard_Integer FixSameParameterMode();
	Standard_Integer FixVertexPositionMode();
	Standard_Integer FixVertexTolMode();
};

interface TopoDS_Shell {
	void TopoDS_Shell();
	void TopoDS_Shell([Const, Ref] TopoDS_Shell T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Shell implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface ShapeFix_Shell {
	void ShapeFix_Shell();
	void ShapeFix_Shell([Const, Ref] TopoDS_Shell shape);
	void Init([Const, Ref] TopoDS_Shell shell);
	Standard_Boolean Perform([Const, Ref] optional Handle_Message_ProgressIndicator theProgress);
	Standard_Boolean FixFaceOrientation(
		[Const, Ref] TopoDS_Shell shell,
		[Const] optional Standard_Boolean isAccountMultiConex = true,
		[Const] optional Standard_Boolean NonManifold = false
	);
	[Value] TopoDS_Shell Shell();
	[Value] TopoDS_Shape Shape();
	Standard_Integer NbShells();
	[Value] TopoDS_Compound ErrorFaces();
	Standard_Boolean Status([Const] ShapeExtend_Status status);
	// [Value] Handle_ShapeFix_Face FixFaceTool();
	// void SetMsgRegistrator([Const, Ref] Handle_ShapeExtend_BasicMsgRegistrator msgreg);
	void SetPrecision([Const] Standard_Real preci);
	void SetMinTolerance([Const] Standard_Real mintol);
	void SetMaxTolerance([Const] Standard_Real maxtol);
	Standard_Integer FixFaceMode();
	Standard_Integer FixOrientationMode();
	void SetNonManifoldFlag([Const] Standard_Boolean isNonManifold);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface ShapeFix_Solid {
	void ShapeFix_Solid();
	void ShapeFix_Solid([Ref] TopoDS_Solid shape);
	void Init([Const, Ref] TopoDS_Solid solid);
	Standard_Boolean Perform([Const, Ref] optional Handle_Message_ProgressIndicator theProgress);
	[Value] TopoDS_Solid SolidFromShell(
		[Const, Ref] TopoDS_Shell shell
	);
	[Value] TopoDS_Solid Solid();
	[Value] TopoDS_Shape Shape();
	Standard_Boolean Status([Const] ShapeExtend_Status status);
	void SetPrecision([Const] Standard_Real preci);
	void SetMinTolerance([Const] Standard_Real mintol);
	void SetMaxTolerance([Const] Standard_Real maxtol);
	Standard_Integer FixShellMode ();
	Standard_Boolean CreateOpenSolidMode();
};

interface TopoDS_CompSolid {
	void TopoDS_CompSolid();
	void TopoDS_CompSolid([Const, Ref] TopoDS_CompSolid T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_CompSolid implements TopoDS_Shape;

interface TopoDS_Solid {
	void TopoDS_Solid();
	void TopoDS_Solid([Const, Ref] TopoDS_Solid T2);
	Standard_Boolean IsNull();
	void Nullify();
	[Const, Ref] TopLoc_Location Location();
	// void Location([Const, Ref] TopLoc_Location theLoc);
	[Value] TopoDS_Shape Located([Const, Ref] TopLoc_Location theLoc);
	TopAbs_Orientation Orientation();
	// void Orientation(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Oriented(TopAbs_Orientation theOrient);
	// [Const, Ref] Handle_TopoDS_TShape TShape();
	TopAbs_ShapeEnum ShapeType();
	Standard_Boolean Free();
	// void Free(Standard_Boolean theIsFree);
	Standard_Boolean Locked();
	// void Locked(Standard_Boolean theIsLocked);
	Standard_Boolean Modified();
	// void Modified(Standard_Boolean theIsModified);
	Standard_Boolean Checked();
	// void Checked(Standard_Boolean theIsChecked);
	Standard_Boolean Orientable();
	// void Orientable([Const] Standard_Boolean theIsOrientable);
	Standard_Boolean Closed();
	// void Closed(Standard_Boolean theIsClosed);
	Standard_Boolean Infinite();
	// void Infinite(Standard_Boolean theIsInfinite);
	Standard_Boolean Convex();
	// void Convex(Standard_Boolean theIsConvex);
	void Move([Const, Ref] TopLoc_Location thePosition);
	[Value] TopoDS_Shape Moved([Const, Ref] TopLoc_Location thePosition);
	void Reverse();
	[Value] TopoDS_Shape Reversed();
	void Complement();
	[Value] TopoDS_Shape Complemented();
	void Compose(TopAbs_Orientation theOrient);
	[Value] TopoDS_Shape Composed(TopAbs_Orientation theOrient);
	Standard_Integer NbChildren();
	Standard_Boolean IsPartner([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsSame([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsEqual([Const, Ref] TopoDS_Shape theOther);
	// Standard_Boolean operator == ([Const, Ref] TopoDS_Shape theOther);
	Standard_Boolean IsNotEqual([Const, Ref] TopoDS_Shape theOther);
	Standard_Integer HashCode(Standard_Integer theUpperBound);
	void EmptyCopy();
	[Value] TopoDS_Shape EmptyCopied();
};
TopoDS_Solid implements TopoDS_Shape;

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface BRepBuilderAPI_MakeSolid {
	void BRepBuilderAPI_MakeSolid();
	void BRepBuilderAPI_MakeSolid([Const, Ref] TopoDS_CompSolid S);
	// void BRepBuilderAPI_MakeSolid([Const, Ref] TopoDS_Shell S);
	void BRepBuilderAPI_MakeSolid(
		[Const, Ref] TopoDS_Shell S1,
		[Const, Ref] TopoDS_Shell S2
	);
	void BRepBuilderAPI_MakeSolid(
		[Const, Ref] TopoDS_Shell S1,
		[Const, Ref] TopoDS_Shell S2,
		[Const, Ref] TopoDS_Shell S3
	);
	// void BRepBuilderAPI_MakeSolid([Const, Ref] TOpoDS_Solid So);
	// void BRepBuilderAPI_MakeSolid(
	// 	[Const, Ref] TopoDS_Solid So,
	// 	[Const, Ref] TopoDS_Shell S
	// );
	void Add([Const, Ref] TopoDS_Shell S);
	Standard_Boolean IsDone();
	[Const, Ref] TopoDS_Solid Solid();
	Standard_Boolean IsDeleted([Const, Ref] TopoDS_Shape S);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface STEPControl_Writer {
	void STEPControl_Writer();
	// void STEPControl_Writer(
	// 	[Const, Ref] Handle_XSControl_WorkSession WS,
	// 	[Const] optional Standard_Boolean scratch = true
	// );
	void SetTolerance([Const] Standard_Real Tol);
	void UnsetTolerance();
	// void SetWS(
	// 	[Const, Ref] Handle_XSControl_WorkSession WS,
	// 	[Const] Standard_Boolean scratch = true
	// );
	// [Value] Handle_XSControl_WorkSession WS();
	// [Value] Handle_StepData_StepModel Model([Const] Standard_Boolean newone = false);
	IFSelect_ReturnStatus Transfer(
		[Const, Ref] TopoDS_Shape sh,
		[Const] STEPControl_StepModelType mode,
		[Const] optional Standard_Boolean compgraph = true
	);
	IFSelect_ReturnStatus Write(
		[Const] DOMString filename
	);
	void PrintStatsTransfer(
		[Const] Standard_Integer what,
		[Const] optional Standard_Integer mode = 0
	);
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
interface Poly_PolygonOnTriangulation {
	void Poly_PolygonOnTriangulation([Const, Ref] TColStd_Array1OfInteger Nodes);
	void Poly_PolygonOnTriangulation(
		[Const, Ref] TColStd_Array1OfInteger Nodes,
		[Const, Ref] TColStd_Array1OfReal Parameters
	);
	// [Value] Handle_Poly_PolygonOnTriangulation Copy();
	// Standard_Real Deflection();
	void Deflection([Const] Standard_Real D);
	Standard_Integer NbNodes();
	[Const, Ref] TColStd_Array1OfInteger Nodes();
	Standard_Boolean HasParameters();
	// Handle_TColStd_HArray1OfReal Parameters();
};

interface BRepBuilderAPI_Copy{
  void BRepBuilderAPI_Copy();
  void BRepBuilderAPI_Copy(
    [Const, Ref] TopoDS_Shape S,
		[Const] optional Standard_Boolean copyGeom = true,
    [Const] optional Standard_Boolean copyMesh = false
  );

  void Perform(
    [Const, Ref] TopoDS_Shape S,
    [Const] optional Standard_Boolean copyGeom = true,
    [Const] optional Standard_Boolean copyMesh = false
  );
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum STEPControl_StepModelType
{
	"STEPControl_AsIs",
	"STEPControl_ManifoldSolidBrep",
	"STEPControl_BrepWithVoids",
	"STEPControl_FacetedBrep",
	"STEPControl_FacetedBrepAndBrepWithVoids",
	"STEPControl_ShellBasedSurfaceModel",
	"STEPControl_GeometricCurveSet",
	"STEPControl_Hybrid"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum BRepOffset_Mode {
	"BRepOffset_Skin",
	"BRepOffset_Pipe",
	"BRepOffset_RectoVerso"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum IFSelect_ReturnStatus{
	"IFSelect_RetVoid",
	"IFSelect_RetDone",
	"IFSelect_RetError",
	"IFSelect_RetFail",
	"IFSelect_RetStop"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_JoinType
{
	"GeomAbs_Arc",
	"GeomAbs_Tangent",
	"GeomAbs_Intersection"
};

// Full interface
// fd47711d682be943f0e0a13d1fb54911b0499c31
enum GeomAbs_Shape
{
	"GeomAbs_C0",
	"GeomAbs_G1",
	"GeomAbs_C1",
	"GeomAbs_G2",
	"GeomAbs_C2",
	"GeomAbs_C3",
	"GeomAbs_CN"
};

enum ShapeExtend_Status {
	"ShapeExtend_OK",
	"ShapeExtend_DONE1",
	"ShapeExtend_DONE2",
	"ShapeExtend_DONE3",
	"ShapeExtend_DONE4",
	"ShapeExtend_DONE5",
	"ShapeExtend_DONE6",
	"ShapeExtend_DONE7",
	"ShapeExtend_DONE8",
	"ShapeExtend_DONE",
	"ShapeExtend_FAIL1",
	"ShapeExtend_FAIL2",
	"ShapeExtend_FAIL3",
	"ShapeExtend_FAIL4",
	"ShapeExtend_FAIL5",
	"ShapeExtend_FAIL6",
	"ShapeExtend_FAIL7",
	"ShapeExtend_FAIL8",
	"ShapeExtend_FAIL"
};

enum BRepBuilderAPI_PipeError {
	"BRepBuilderAPI_PipeDone", 
	"BRepBuilderAPI_PipeNotDone", 
	"BRepBuilderAPI_PlaneNotIntersectGuide", 
	"BRepBuilderAPI_ImpossibleContact"
};

enum BRepFill_TypeOfContact {
	"BRepFill_NoContact",
	"BRepFill_Contact",
	"BRepFill_ContactOnBorder"
};

enum BRepBuilderAPI_FaceError {
	"BRepBuilderAPI_FaceDone",
	"BRepBuilderAPI_NoFace",
	"BRepBuilderAPI_NotPlanar",
	"BRepBuilderAPI_CurveProjectionFailed",
	"BRepBuilderAPI_ParametersOutOfRange"
};

enum ChFi2d_ConstructionError {
	"ChFi2d_NotPlanar",
	"ChFi2d_NoFace",
	"ChFi2d_InitialisationError",	
	"ChFi2d_ParametersError",	
	"ChFi2d_Ready",	
	"ChFi2d_IsDone",
	"ChFi2d_ComputationError",
	"ChFi2d_ConnexionError",
	"ChFi2d_TangencyError",
	"ChFi2d_FirstEdgeDegenerated",
	"ChFi2d_LastEdgeDegenerated",
	"ChFi2d_BothEdgesDegenerated",
	"ChFi2d_NotAuthorized"
};
